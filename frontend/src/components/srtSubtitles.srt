0
00:12:33,700 --> 00:12:35,010
Hello. Hello. Hello.

1
00:12:43,780 --> 00:12:45,000
Good evening. Good evening. I'm

2
00:12:46,159 --> 00:12:47,179
good evening, bro.

3
00:12:47,609 --> 00:12:50,809
Am I Am I seeing you after a very long time. Were you not there

4
00:12:51,059 --> 00:12:52,030
or were you there?

5
00:12:52,700 --> 00:12:53,489
Yes. Yes, yes.

6
00:12:55,239 --> 00:12:57,059
Were you on a break or something?

7
00:12:57,450 --> 00:12:58,809
Yeah, I went for a vacation,

8
00:12:59,429 --> 00:13:00,750
so I just came back on Monday.

9
00:13:01,229 --> 00:13:02,450
Oh, very nice. Very nice. Yeah.

10
00:13:03,609 --> 00:13:06,609
Uh, did you catch up with the previous sessions which you were doing?

11
00:13:06,940 --> 00:13:07,450
Yeah,

12
00:13:07,710 --> 00:13:09,619
yeah. We'll be trying to commit all the things.

13
00:13:11,020 --> 00:13:11,559
OK,

14
00:13:11,739 --> 00:13:12,419
OK, OK,

15
00:13:12,619 --> 00:13:14,159
so it's good to have you back.

16
00:13:17,989 --> 00:13:19,020
Good evening.

17
00:13:23,559 --> 00:13:24,489
I was

18
00:13:24,659 --> 00:13:26,690
a milestone one.

19
00:13:26,859 --> 00:13:28,369
Were you all able to do it?

20
00:13:28,640 --> 00:13:30,369
Did you find any difficulties?

21
00:13:31,710 --> 00:13:35,000
Did you try the trick for baking inputs Which I told you

22
00:13:35,929 --> 00:13:38,539
I mean restructuring the key and the value and all that stuff.

23
00:13:38,549 --> 00:13:41,030
Did you all try someone? Did someone try that at least,

24
00:13:41,289 --> 00:13:44,140
or did you just directly set the values for, uh,

25
00:13:44,150 --> 00:13:47,010
both the or all the three inputs which were there?

26
00:13:51,520 --> 00:13:51,780
So

27
00:13:51,940 --> 00:13:53,780
and all all the tests are passing.

28
00:13:54,039 --> 00:13:54,299
And Vikash,

29
00:13:55,659 --> 00:13:57,630
which which you plan to have OK?

30
00:13:58,250 --> 00:13:59,619
Oh, ok. Ok, ok.

31
00:14:00,190 --> 00:14:00,950
What did you find?

32
00:14:00,960 --> 00:14:04,669
Any test for this being very restrictive in any any of the approach,

33
00:14:04,679 --> 00:14:05,429
something like that.

34
00:14:06,469 --> 00:14:08,929
Like we had this problem with, uh, Q

35
00:14:09,340 --> 00:14:13,880
dynamic and all that. Was there any particular test which was causing a problem?

36
00:14:14,469 --> 00:14:15,780
It passed smoothly.

37
00:14:16,309 --> 00:14:17,159
OK, brilliant.

38
00:14:17,419 --> 00:14:17,489
Yeah,

39
00:14:19,289 --> 00:14:23,859
but But, uh, like, I was a little bit struggling to add spin out like I was

40
00:14:24,080 --> 00:14:28,270
trying not to completely figured out how to implement it correctly.

41
00:14:28,719 --> 00:14:34,239
Like how to, uh, know how to, like, give a gap of some time to load the spinner. Uh,

42
00:14:34,750 --> 00:14:36,090
I can understand that,

43
00:14:36,210 --> 00:14:40,070
Uh, actually, you will be able to like, because that's a material U, I element,

44
00:14:40,080 --> 00:14:40,280
right.

45
00:14:40,289 --> 00:14:41,169
So once you are,

46
00:14:41,520 --> 00:14:42,619
um, a bit

47
00:14:42,929 --> 00:14:45,669
a bit a bit more comfortable with working with those kind of elements.

48
00:14:45,890 --> 00:14:47,969
Uh, there will be something which you might, you know,

49
00:14:47,979 --> 00:14:51,599
encounter which would help you style

50
00:14:51,719 --> 00:14:52,359
the material

51
00:14:52,539 --> 00:14:55,799
elements. You know very well. So there's something

52
00:14:55,900 --> 00:14:56,549
called us,

53
00:14:56,900 --> 00:14:59,270
um, create styles or something like that right

54
00:14:59,419 --> 00:14:59,799
in in.

55
00:15:00,299 --> 00:15:01,950
So we'll not be covering that, actually,

56
00:15:01,960 --> 00:15:04,099
because that becomes a as an advanced use case.

57
00:15:04,210 --> 00:15:08,400
So for now, you can, you know, just figure out using which element you want to style.

58
00:15:08,630 --> 00:15:10,320
Um, using the

59
00:15:10,630 --> 00:15:15,229
inspect element or something. Or maybe if you want, you can also use, um, important,

60
00:15:15,419 --> 00:15:18,750
um, tag for that as well. If you want to post

61
00:15:18,909 --> 00:15:19,280
something

62
00:15:20,109 --> 00:15:21,960
but the right way, which I

63
00:15:22,369 --> 00:15:24,700
suggest is using their, um,

64
00:15:24,849 --> 00:15:26,330
theme

65
00:15:26,719 --> 00:15:28,219
for styling the components.

66
00:15:28,650 --> 00:15:29,719
You will get there. Don't worry.

67
00:15:34,330 --> 00:15:38,880
Yes, This is actually the way. Yeah, yeah, yeah. No, no, that is actually the way. So,

68
00:15:39,150 --> 00:15:42,669
um, something which I would you know, Which I will tell you all today, right?

69
00:15:42,679 --> 00:15:44,750
When you have, like, all your naming conventions,

70
00:15:44,760 --> 00:15:48,500
right when you're naming all these functions or states or something like that,

71
00:15:48,510 --> 00:15:48,609
right.

72
00:15:48,619 --> 00:15:52,219
It's better to suppose if, for example, if you have any, um,

73
00:15:52,799 --> 00:15:57,849
a bull in values. Right. So it's better to have kind of a verb in front of the word,

74
00:15:57,979 --> 00:16:00,989
right? I suppose if it is loading right, so it should be

75
00:16:01,099 --> 00:16:02,419
is loading, right?

76
00:16:02,700 --> 00:16:05,630
And if it is, suppose, um, for example,

77
00:16:05,830 --> 00:16:06,530
um

78
00:16:07,229 --> 00:16:08,020
um,

79
00:16:08,239 --> 00:16:13,159
maybe it's like it. So something has something like, uh, a component has

80
00:16:13,309 --> 00:16:16,159
something or has not something. So you can, you know, add,

81
00:16:16,400 --> 00:16:21,000
um, suppose has buttons or has, uh, input something like that.

82
00:16:21,010 --> 00:16:22,150
I suppose if you want to use it.

83
00:16:22,320 --> 00:16:25,080
So it's better to have, um, kind of

84
00:16:26,890 --> 00:16:29,940
verbs in front of it, because that becomes a very good naming convention.

85
00:16:29,950 --> 00:16:31,690
And the way where I'm getting this is,

86
00:16:31,989 --> 00:16:32,539
uh,

87
00:16:43,309 --> 00:16:44,200
so here.

88
00:16:45,270 --> 00:16:47,599
Right. I'll copy this for you.

89
00:16:48,580 --> 00:16:49,719
This becomes a very

90
00:16:49,929 --> 00:16:51,020
nice way to

91
00:16:51,390 --> 00:16:53,409
name your components

92
00:16:53,919 --> 00:16:55,830
or or or name your, uh,

93
00:16:56,770 --> 00:16:58,099
props, actually.

94
00:16:58,559 --> 00:16:58,940
Right.

95
00:17:00,530 --> 00:17:01,270
This a cor or

96
00:17:01,539 --> 00:17:04,300
state or whatever. You can use this particular thing.

97
00:17:05,569 --> 00:17:09,209
Should we start? We have only 20 people in here very less

98
00:17:11,348 --> 00:17:12,608
announced for today.

99
00:17:12,739 --> 00:17:13,779
By this time.

100
00:17:22,338 --> 00:17:22,558
Hey,

101
00:17:24,420 --> 00:17:24,439
you

102
00:17:31,420 --> 00:17:32,910
Things should start now. I believe

103
00:17:33,500 --> 00:17:33,869
I

104
00:17:34,890 --> 00:17:35,040
What do you

105
00:17:35,239 --> 00:17:35,439
What do you mean

106
00:17:36,319 --> 00:17:37,130
and starting?

107
00:17:37,849 --> 00:17:38,920
And people join and they,

108
00:17:39,199 --> 00:17:39,619
you know,

109
00:17:42,709 --> 00:17:42,910
got

110
00:17:43,119 --> 00:17:43,729
it, I believe.

111
00:17:43,959 --> 00:17:44,500
OK,

112
00:17:45,189 --> 00:17:46,800
are people ready? Should I start?

113
00:17:47,369 --> 00:17:50,170
Listen in the chat, if you are ready with your code sandbox

114
00:17:50,660 --> 00:17:52,739
to start coding for today's session.

115
00:17:55,489 --> 00:17:56,180
Yes.

116
00:17:56,880 --> 00:17:58,689
OK, Brilliant. Brilliant. Brilliant.

117
00:17:59,359 --> 00:17:59,500
Oh,

118
00:18:07,319 --> 00:18:11,099
so hello and welcome to Session five of Man one sprint.

119
00:18:11,540 --> 00:18:15,010
And today in this session, we'll be dealing with two main things, right?

120
00:18:15,020 --> 00:18:17,920
One is the lists and keys. Very important topic,

121
00:18:18,079 --> 00:18:22,250
Uh, and very much, you know, confusing and, uh,

122
00:18:22,530 --> 00:18:24,109
as well as you know, a lot.

123
00:18:24,390 --> 00:18:26,770
Uh, more conventions. You learn here, right?

124
00:18:26,780 --> 00:18:29,969
Like last time we learned the convention of using internally operators

125
00:18:30,130 --> 00:18:32,390
to either show or remove an element.

126
00:18:32,589 --> 00:18:36,780
And you also learned about what the and operator is, Right, So So you can, you know,

127
00:18:36,790 --> 00:18:37,599
basically perform.

128
00:18:37,930 --> 00:18:38,060
And,

129
00:18:38,339 --> 00:18:39,150
um,

130
00:18:39,369 --> 00:18:42,939
you can add bullion expressions with JSX so that, um,

131
00:18:42,949 --> 00:18:46,630
it it it decides whether to show the element or not show the element

132
00:18:46,750 --> 00:18:51,199
similar way we learn something, Uh, if you want to, you know, populate, um,

133
00:18:51,709 --> 00:18:53,319
a list or something like that, right?

134
00:18:53,329 --> 00:18:57,770
From an R A Maybe, uh, which is a very fairly common use case. Right.

135
00:18:57,780 --> 00:18:59,579
So you're getting you'll be getting data in

136
00:18:59,699 --> 00:19:00,459
json format.

137
00:19:00,719 --> 00:19:05,140
Uh, that json format data will actually be, you know, used to show, like,

138
00:19:05,150 --> 00:19:06,630
to to display things on the screen.

139
00:19:06,729 --> 00:19:08,560
And that's where the lists come in.

140
00:19:08,729 --> 00:19:12,175
And thing which goes hand in hand with list is react keys. Right.

141
00:19:12,185 --> 00:19:14,755
So react keys is another very important topic

142
00:19:14,765 --> 00:19:18,834
which you should know to avoid unpredictable outcomes.

143
00:19:18,844 --> 00:19:19,795
When you're, you know,

144
00:19:20,094 --> 00:19:22,454
uh, using the lists and all right,

145
00:19:22,574 --> 00:19:26,755
and then we'll learn something. What is called a side effects Along with

146
00:19:27,175 --> 00:19:29,915
which hook to use for side effects.

147
00:19:29,925 --> 00:19:32,834
OK, the side effects is another very big topic of its own

148
00:19:33,410 --> 00:19:35,339
right, and you'll see how,

149
00:19:35,489 --> 00:19:39,119
uh, the hook will, which we'll be using Spoiler alert. It's called the use effect.

150
00:19:39,170 --> 00:19:39,520
Right?

151
00:19:39,530 --> 00:19:43,839
So when we'll be using that kind of hook, you'll see that it can perform, You know,

152
00:19:43,849 --> 00:19:47,310
a lot of operations which you use to split

153
00:19:47,319 --> 00:19:50,589
into three different life cycle methods into just one.

154
00:19:50,839 --> 00:19:52,439
I hope you're all excited to start.

155
00:19:53,079 --> 00:19:53,790
Should be

156
00:19:55,790 --> 00:19:56,459
Yes.

157
00:20:07,800 --> 00:20:08,250
OK,

158
00:20:12,439 --> 00:20:13,189
starting with this

159
00:20:13,310 --> 00:20:14,020
key. Right?

160
00:20:14,390 --> 00:20:17,270
Um let's start. Let's start by doing something right?

161
00:20:17,280 --> 00:20:19,959
So let's just start with an activity so that we can you know,

162
00:20:20,209 --> 00:20:20,810
um

163
00:20:21,550 --> 00:20:25,510
understand why we would, you know, require a better way of doing a thing.

164
00:20:25,520 --> 00:20:27,250
OK, I'll give you a starter code.

165
00:20:27,630 --> 00:20:28,520
Uh,

166
00:20:29,160 --> 00:20:29,709
OK,

167
00:20:29,959 --> 00:20:32,119
so one thing which you can do is

168
00:20:33,119 --> 00:20:35,030
starter code would be

169
00:20:36,150 --> 00:20:36,719
this

170
00:20:37,369 --> 00:20:37,849
right?

171
00:20:38,050 --> 00:20:43,010
So create a component. Uh, SRC slash session four or session five, basically right.

172
00:20:43,020 --> 00:20:45,939
We are end of one session behind on the slide deck.

173
00:20:46,109 --> 00:20:47,119
Uh, always

174
00:20:48,140 --> 00:20:50,199
so. SRC slash section five

175
00:20:50,300 --> 00:20:52,099
slash list dot Js

176
00:20:52,430 --> 00:20:54,010
with the given starter code in the chat.

177
00:20:54,020 --> 00:20:56,430
OK, once you're done plus one in the chat for me, OK?

178
00:21:17,199 --> 00:21:18,010
Are the people done

179
00:21:57,949 --> 00:21:58,400
OK.

180
00:21:59,420 --> 00:21:59,910
Mhm.

181
00:22:03,079 --> 00:22:05,050
And then in your

182
00:22:07,199 --> 00:22:08,709
in your in your ok,

183
00:22:09,060 --> 00:22:11,380
so in your app dot Js Now you need to

184
00:22:11,390 --> 00:22:15,510
display the list component right for each element in superheroes,

185
00:22:15,520 --> 00:22:15,910
right?

186
00:22:15,989 --> 00:22:18,959
So there are three elements in superheroes, basically. Right.

187
00:22:19,150 --> 00:22:23,540
So what you need to do is basically use this list component three times.

188
00:22:23,550 --> 00:22:25,520
Kind of because you have three elements and then pass.

189
00:22:25,665 --> 00:22:27,265
Send the values as props

190
00:22:27,425 --> 00:22:29,984
right to the list component, as you can see on the list component.

191
00:22:29,994 --> 00:22:31,244
And it takes the props. Right.

192
00:22:31,494 --> 00:22:35,244
And in the props, it also, you know, takes the name or whatever.

193
00:22:35,375 --> 00:22:39,905
Right? So what you can do is, uh, since it takes the name in the prop, right?

194
00:22:39,915 --> 00:22:42,175
What you can do here is you can pass the

195
00:22:42,435 --> 00:22:43,435
superhero

196
00:22:43,625 --> 00:22:47,545
zero name superhero 01 name, superhero, two name and all that

197
00:22:47,685 --> 00:22:48,834
to the list component

198
00:22:49,354 --> 00:22:50,334
again, right?

199
00:22:50,535 --> 00:22:51,854
Set the name Property two,

200
00:22:52,114 --> 00:22:53,354
superhero name.

201
00:22:53,614 --> 00:22:54,114
Right?

202
00:22:55,209 --> 00:22:55,739
And

203
00:22:56,760 --> 00:22:57,699
once you're done,

204
00:22:58,270 --> 00:23:01,520
you would be seeing something on the screen. So let me just

205
00:23:02,719 --> 00:23:05,209
also get the starter code from here.

206
00:23:07,630 --> 00:23:07,839
Yeah,

207
00:23:08,500 --> 00:23:10,349
I hope everyone understands the question which I am

208
00:23:10,900 --> 00:23:11,619
getting at,

209
00:23:14,270 --> 00:23:16,619
so let's do Js look something like this,

210
00:23:17,180 --> 00:23:17,680
right?

211
00:23:18,099 --> 00:23:21,780
And I believe because we are using JavaScript, right?

212
00:23:22,020 --> 00:23:25,609
I always prefer to restructure the crops.

213
00:23:25,949 --> 00:23:29,599
Right, Because we cannot know what the crops would be coming in,

214
00:23:29,900 --> 00:23:32,040
so that becomes a bit difficult. Honestly.

215
00:23:32,449 --> 00:23:32,900
Right.

216
00:23:33,489 --> 00:23:34,319
So

217
00:23:35,030 --> 00:23:38,020
now what you want to do here is once you have this in place,

218
00:23:38,030 --> 00:23:39,650
I believe people can take in the name,

219
00:23:39,790 --> 00:23:41,640
right, And then you can display the name here. Right?

220
00:23:43,540 --> 00:23:44,040
Ok,

221
00:23:44,229 --> 00:23:47,550
so So this is the list component which you can see. You can have the name right.

222
00:23:47,560 --> 00:23:49,989
Or either you can have props here instead.

223
00:23:50,180 --> 00:23:53,069
Right? Or either you can be structured using name,

224
00:23:53,219 --> 00:23:55,439
whatever whatever feels right to you,

225
00:23:55,709 --> 00:23:58,859
right? Same goes with here. So if you're using props, it will be props dot name.

226
00:23:58,869 --> 00:24:01,670
If you're using this kind of syntax, it will be just name.

227
00:24:01,810 --> 00:24:02,319
OK,

228
00:24:02,540 --> 00:24:04,010
so once you're done with this,

229
00:24:04,180 --> 00:24:05,989
go into your app dot Js

230
00:24:06,719 --> 00:24:07,339
right.

231
00:24:07,640 --> 00:24:08,670
And, uh,

232
00:24:09,390 --> 00:24:10,939
use this, uh,

233
00:24:11,079 --> 00:24:12,280
use

234
00:24:12,469 --> 00:24:13,609
this particular

235
00:24:14,319 --> 00:24:15,339
array right

236
00:24:15,699 --> 00:24:16,199
to

237
00:24:17,280 --> 00:24:17,310
I.

238
00:24:17,319 --> 00:24:20,530
I don't pass the name here in in for each

239
00:24:20,540 --> 00:24:23,550
of the superheroes into a list into the list component.

240
00:24:23,920 --> 00:24:24,969
Does that make sense?

241
00:24:25,250 --> 00:24:27,689
So you basically would you want to display

242
00:24:27,939 --> 00:24:28,849
the

243
00:24:30,099 --> 00:24:30,839
list

244
00:24:31,089 --> 00:24:32,869
in there. OK, let me

245
00:24:33,479 --> 00:24:34,920
control C

246
00:24:36,250 --> 00:24:37,380
Control V

247
00:24:38,479 --> 00:24:39,260
See

248
00:24:39,800 --> 00:24:40,310
Right.

249
00:24:40,869 --> 00:24:43,739
And here what I want is

250
00:24:43,949 --> 00:24:43,959
a

251
00:24:44,060 --> 00:24:45,189
list component,

252
00:24:46,030 --> 00:24:46,599
right?

253
00:24:48,849 --> 00:24:51,060
And I since I want to display three names,

254
00:24:51,069 --> 00:24:53,359
basically I would want to have three of them.

255
00:24:53,670 --> 00:24:54,229
Ok,

256
00:24:54,520 --> 00:24:56,020
Does that make sense to everyone?

257
00:24:57,349 --> 00:24:58,479
What? What I'm getting at

258
00:24:59,069 --> 00:24:59,660
now.

259
00:25:00,079 --> 00:25:02,310
So here, if you have your superheroes, right?

260
00:25:02,520 --> 00:25:04,010
So what you would want to do is you want

261
00:25:04,020 --> 00:25:07,180
to pass each of the superhero name into the list,

262
00:25:07,729 --> 00:25:08,250
OK?

263
00:25:08,430 --> 00:25:11,199
And then you'll probably be seeing something on the screen as well.

264
00:25:11,209 --> 00:25:12,459
So right now I can see these,

265
00:25:12,699 --> 00:25:15,459
but I cannot see the name. Right. So I need to pass the name as well

266
00:25:15,780 --> 00:25:18,729
in the list, right? So list can take a prop as name,

267
00:25:18,949 --> 00:25:20,979
right? So just pass the prop. And once you're done,

268
00:25:21,260 --> 00:25:23,060
uh, plus one in the chat.

269
00:25:23,839 --> 00:25:24,329
OK?

270
00:25:41,069 --> 00:25:42,380
OK, cool. Cool, cool.

271
00:25:43,180 --> 00:25:45,439
Brilliant. Can you see the name? And they tick in front of it

272
00:25:45,550 --> 00:25:46,229
already?

273
00:25:47,160 --> 00:25:48,589
If you can see this wide in the chart,

274
00:25:49,469 --> 00:25:50,959
everyone who can see the name

275
00:25:51,109 --> 00:25:55,319
along with the tick in front of it. So what? What? What I'm planning here to do is name

276
00:25:55,589 --> 00:25:58,060
and then what? What I would do is superheroes.

277
00:25:58,339 --> 00:26:00,349
And for the first superhero I would have to

278
00:26:00,359 --> 00:26:03,099
use superhero zero dot name something like that,

279
00:26:03,109 --> 00:26:03,500
right?

280
00:26:04,050 --> 00:26:06,979
And similarly for other superheroes as well,

281
00:26:07,199 --> 00:26:10,359
I'll have to use maybe one or maybe two,

282
00:26:11,099 --> 00:26:11,699
right,

283
00:26:12,510 --> 00:26:15,000
and close this bracket as well.

284
00:26:15,680 --> 00:26:16,530
So it does not

285
00:26:17,099 --> 00:26:18,510
cause any problems.

286
00:26:19,130 --> 00:26:21,689
Can everyone see something like this in front of them?

287
00:26:24,459 --> 00:26:25,109
Yes or no?

288
00:26:26,839 --> 00:26:29,369
So once you start passing the names, right,

289
00:26:50,270 --> 00:26:51,040
so,

290
00:26:51,239 --> 00:26:53,079
by the way, in the list, right.

291
00:26:54,270 --> 00:26:56,910
OK, so the benefit of Des structuring I'll I'll come to it.

292
00:26:57,189 --> 00:27:00,619
Uh, first, if you can answer this question so in the list, right.

293
00:27:00,790 --> 00:27:04,020
What is the value of E target or check the note for a checkbox?

294
00:27:04,030 --> 00:27:06,760
Generally, can you Can you let me know about that?

295
00:27:08,380 --> 00:27:11,969
So here, if we have this, uh, you know, input, right?

296
00:27:12,239 --> 00:27:14,300
And if we are having,

297
00:27:14,420 --> 00:27:17,550
you know, checked here, can you Can you find out what the check is

298
00:27:18,410 --> 00:27:19,260
telling us

299
00:27:19,670 --> 00:27:20,599
regarding this?

300
00:27:20,750 --> 00:27:21,790
It may become so long

301
00:27:22,569 --> 00:27:24,420
so you can understand what? What it is bringing in

302
00:27:31,229 --> 00:27:31,939
OK. The

303
00:27:32,119 --> 00:27:32,359
bull

304
00:27:32,459 --> 00:27:33,520
to a false OK,

305
00:27:34,500 --> 00:27:38,170
So if the event was triggered when the checkbox was checked, right?

306
00:27:38,400 --> 00:27:39,050
So

307
00:27:39,410 --> 00:27:42,119
either target or check is basically giving you up

308
00:27:42,229 --> 00:27:44,439
if it is checked or not, right. A true or false value.

309
00:27:44,880 --> 00:27:45,380
Right?

310
00:27:45,630 --> 00:27:47,119
So now what happens is,

311
00:27:47,369 --> 00:27:50,849
uh I suppose suppose what we want to do here is,

312
00:27:51,250 --> 00:27:51,829
um

313
00:27:52,689 --> 00:27:55,260
maybe if if if this is checked or not right,

314
00:27:55,270 --> 00:27:57,410
we we can we can we want to find if it's checked or not.

315
00:27:57,810 --> 00:27:59,609
The reason what what happens here is

316
00:28:00,040 --> 00:28:04,020
now, if suppose in in this scenario right in this scenario,

317
00:28:04,359 --> 00:28:06,099
uh, which what would we have

318
00:28:06,459 --> 00:28:07,040
here? Right.

319
00:28:07,180 --> 00:28:11,160
So here we were passing, you know, list one like the first name,

320
00:28:11,170 --> 00:28:12,300
the second name and the third name.

321
00:28:12,310 --> 00:28:15,579
Suppose if there are, like, 101,000 names in the list,

322
00:28:16,069 --> 00:28:16,359
you know,

323
00:28:16,369 --> 00:28:20,199
this would become very practically impossible to write 1000 names under it.

324
00:28:20,300 --> 00:28:22,140
Does that make sense, people?

325
00:28:23,920 --> 00:28:27,599
So if if I have a lot of names, right, so for now, I just have three names.

326
00:28:27,609 --> 00:28:29,500
A fairly simple thing to do

327
00:28:29,630 --> 00:28:30,390
but suppose in in.

328
00:28:30,400 --> 00:28:31,099
In any case,

329
00:28:31,109 --> 00:28:34,750
if I have 1000 names or 100 even if I don't know how many names will be there,

330
00:28:34,920 --> 00:28:38,729
right. For example, sometimes the API returns this R A with 10 names.

331
00:28:38,739 --> 00:28:41,979
Sometimes they return with 25 names. Sometimes something else.

332
00:28:41,989 --> 00:28:46,060
How many should I actually go about putting here? Right, So I don't know about it yet.

333
00:28:46,229 --> 00:28:47,550
Does that make sense to everyone?

334
00:28:49,560 --> 00:28:50,209
Yes or no?

335
00:28:51,319 --> 00:28:56,459
So So So So how long will I go about doing 0123 and all that? We don't know it yet.

336
00:28:56,729 --> 00:28:57,239
OK,

337
00:28:57,400 --> 00:28:58,810
so in that scenario,

338
00:28:59,150 --> 00:28:59,670
right,

339
00:28:59,890 --> 00:29:01,890
What we can do is we can instead,

340
00:29:02,579 --> 00:29:06,959
for one, what you can do is we can start by replacing the J six that you already have

341
00:29:07,239 --> 00:29:08,150
for a list

342
00:29:08,800 --> 00:29:10,069
with this kind of version,

343
00:29:10,520 --> 00:29:11,949
OK? And see if it works or not.

344
00:29:13,189 --> 00:29:14,920
I mean, well, we we we are building up to that.

345
00:29:14,930 --> 00:29:17,160
OK, just don't get spoilers to people already.

346
00:29:18,819 --> 00:29:19,420
OK,

347
00:29:19,719 --> 00:29:20,560
so

348
00:29:21,310 --> 00:29:24,550
so try to try to write something like this and see if it works or not.

349
00:29:24,790 --> 00:29:27,569
OK, so put put your, uh JSX.

350
00:29:27,959 --> 00:29:30,170
You know, these three things inside

351
00:29:30,530 --> 00:29:32,459
an array and see if it works or not.

352
00:29:34,390 --> 00:29:34,829
OK?

353
00:29:34,949 --> 00:29:37,000
And the way you put this inside an array

354
00:29:37,160 --> 00:29:39,280
is, uh, and and put it inside.

355
00:29:39,290 --> 00:29:43,239
JSX is using the curly braces because you You need to write curly bases to,

356
00:29:43,449 --> 00:29:46,619
you know, insert javascript in between JSX Yes or no?

357
00:29:47,910 --> 00:29:50,239
I hope you remember this from the last session. At least

358
00:29:50,829 --> 00:29:54,709
that if you want to put in JavaScript inside JSX you need to use calibrations

359
00:29:55,290 --> 00:29:59,550
and we can have an A a as well as as you. As you will see. OK,

360
00:29:59,650 --> 00:30:01,260
so once you're done plus one in the chart.

361
00:30:02,689 --> 00:30:04,180
If that does make sense to you

362
00:30:06,079 --> 00:30:08,010
if it still gives you the same result basically

363
00:30:19,890 --> 00:30:20,339
OK,

364
00:30:21,920 --> 00:30:26,229
so is the Is the page you you saw as being correctly displayed right now.

365
00:30:26,599 --> 00:30:27,400
Is that fine?

366
00:30:31,040 --> 00:30:36,310
So what we wanted to do here is I will just basically go ahead and put this inside an R a

367
00:30:36,699 --> 00:30:37,250
right,

368
00:30:37,930 --> 00:30:40,079
and put commas in front of it.

369
00:30:40,859 --> 00:30:41,410
OK?

370
00:30:41,829 --> 00:30:42,790
And also

371
00:30:43,060 --> 00:30:45,569
put this whole thing inside the braces.

372
00:30:46,270 --> 00:30:46,800
OK,

373
00:30:48,089 --> 00:30:49,699
so once I do, this

374
00:30:50,859 --> 00:30:51,510
is

375
00:30:52,449 --> 00:30:55,869
the reactor is basically smart enough to, you know, pass the,

376
00:30:55,989 --> 00:30:57,000
uh array

377
00:30:57,260 --> 00:30:59,099
and display the U. I elements inside it.

378
00:30:59,109 --> 00:31:01,560
So there's no more, uh, doing, you know,

379
00:31:01,569 --> 00:31:04,989
for each which thing which we used to do with normal JavaScript, right?

380
00:31:05,000 --> 00:31:05,790
Do you remember that?

381
00:31:05,930 --> 00:31:08,390
So we used to have an array, and then we used to have four each.

382
00:31:08,400 --> 00:31:10,219
And then we used to append each element again

383
00:31:10,229 --> 00:31:12,609
and again for each of the elements inside the

384
00:31:12,989 --> 00:31:15,439
array and all that stuff which we used to do with export. Right?

385
00:31:15,449 --> 00:31:16,400
Do you remember export?

386
00:31:16,689 --> 00:31:20,160
Right. So in export, we had to do all this, right? So we had the,

387
00:31:20,420 --> 00:31:23,079
uh, stuff which was there in the magazines array.

388
00:31:23,130 --> 00:31:26,339
Then we went through the loop, and then he started doing all this.

389
00:31:26,660 --> 00:31:27,030
Aria

390
00:31:27,170 --> 00:31:30,660
is pretty smart enough to pass that array and understand it.

391
00:31:30,670 --> 00:31:31,540
It has some, uh,

392
00:31:31,550 --> 00:31:36,260
HTML element inside it or or some JSX inside it and to display it accordingly.

393
00:31:36,560 --> 00:31:37,099
OK,

394
00:31:38,969 --> 00:31:42,670
And can you think of some other ways of generating this kind of

395
00:31:42,810 --> 00:31:44,380
JSXR A from superheroes,

396
00:31:44,750 --> 00:31:48,160
I suppose if you have, uh, So So? So I'll give you a hint. Right?

397
00:31:48,449 --> 00:31:51,819
So the hint would be maybe using, you know, the R a

398
00:31:52,079 --> 00:31:54,900
and then creating a new array from the existing array,

399
00:31:54,910 --> 00:31:56,359
which has the external elements.

400
00:31:56,709 --> 00:31:57,250
Right?

401
00:31:57,430 --> 00:31:58,069
So

402
00:31:58,800 --> 00:32:00,319
how How we generally used to do that

403
00:32:01,329 --> 00:32:03,930
to to create a new array from the existing array,

404
00:32:04,540 --> 00:32:07,859
applying some function, some property onto the onto each element.

405
00:32:08,520 --> 00:32:10,969
What was what was the way, which you used to do it.

406
00:32:13,900 --> 00:32:16,900
OK, so just if you just had to directly copy it was spread

407
00:32:17,319 --> 00:32:18,209
philtre,

408
00:32:18,369 --> 00:32:20,849
uh, would be used. Maybe if you want to, you know,

409
00:32:21,130 --> 00:32:26,099
um, philtre out some things, right? But we want each element to have to be to be

410
00:32:26,380 --> 00:32:28,510
mapped to something directly.

411
00:32:28,520 --> 00:32:33,000
OK, so for the first element, I want a list element, uh, you know, having a

412
00:32:33,130 --> 00:32:36,869
super hero zero name, right? And then the second list element.

413
00:32:36,880 --> 00:32:38,459
I also want something like that third list

414
00:32:38,469 --> 00:32:40,479
element I want also want something similar,

415
00:32:40,709 --> 00:32:41,170
right?

416
00:32:41,510 --> 00:32:44,400
So with the map method, we can return a new array

417
00:32:44,520 --> 00:32:48,380
right, Which we where we can map the existing thing, you know, existing array,

418
00:32:48,390 --> 00:32:49,199
which we have

419
00:32:49,550 --> 00:32:50,119
to

420
00:32:50,310 --> 00:32:51,839
the JSX elements directly.

421
00:32:52,160 --> 00:32:52,660
OK,

422
00:32:52,839 --> 00:32:57,160
Can you rewrite your app component using map? Would you be able to do that?

423
00:32:57,699 --> 00:33:00,040
So what you essentially want to do is if you want to get this

424
00:33:00,160 --> 00:33:00,790
a a basically

425
00:33:00,920 --> 00:33:01,430
right.

426
00:33:01,709 --> 00:33:06,569
So the way you would get this a A is basically applying map on the superheroes, right?

427
00:33:06,599 --> 00:33:08,300
And then, for each of the item,

428
00:33:08,939 --> 00:33:09,969
you need to

429
00:33:10,270 --> 00:33:10,910
uh, in

430
00:33:11,229 --> 00:33:14,670
inside the map function, you need to return AJ SX right.

431
00:33:15,010 --> 00:33:16,849
Which has name as item

432
00:33:17,270 --> 00:33:19,069
like item dot name or something like that,

433
00:33:19,469 --> 00:33:20,939
right? Does that make sense to everyone

434
00:33:21,270 --> 00:33:21,869
or not?

435
00:33:24,719 --> 00:33:26,219
You can write a function for that

436
00:33:26,479 --> 00:33:29,770
or you can write, uh, you know, a constant for that or whatever. Like you can.

437
00:33:29,780 --> 00:33:30,689
You can have a new,

438
00:33:31,010 --> 00:33:31,540
um, a

439
00:33:31,750 --> 00:33:33,790
created and you can pass it inside this

440
00:33:36,270 --> 00:33:39,459
once. You do that, uh, share with me. The code that you wrote

441
00:33:39,589 --> 00:33:41,079
right as well as your return function

442
00:33:41,949 --> 00:33:43,010
Return

443
00:33:43,810 --> 00:33:44,489
statement.

444
00:33:55,359 --> 00:33:58,550
OK, so superheroes map. OK, very nice. Very nice.

445
00:33:58,760 --> 00:34:02,079
So this is where where have you written this? Is this inside? Uh, via

446
00:34:02,689 --> 00:34:06,790
And then is this inside your return? Or is this somewhere else like

447
00:34:06,989 --> 00:34:08,750
Ra? Like someone did earlier?

448
00:34:09,208 --> 00:34:09,750
I guess

449
00:34:10,000 --> 00:34:10,989
Raviraj did right,

450
00:34:17,040 --> 00:34:17,489
Ok,

451
00:34:36,870 --> 00:34:36,899
Mhm.

452
00:34:38,070 --> 00:34:40,310
Other people. Uh, have you done

453
00:34:43,250 --> 00:34:43,260
a

454
00:34:44,969 --> 00:34:45,639
group prachi

455
00:34:47,239 --> 00:34:47,750
they had done

456
00:34:48,620 --> 00:34:49,208
Yes.

457
00:34:50,688 --> 00:34:52,099
Share your code with me as well.

458
00:34:53,620 --> 00:34:54,949
I would also want to see that,

459
00:34:58,030 --> 00:34:58,219
uh,

460
00:35:03,340 --> 00:35:06,620
all of you should share your code in the chat. I mean, that is one way

461
00:35:07,699 --> 00:35:08,949
which would help you to,

462
00:35:09,149 --> 00:35:11,189
you know, improve your code quality as well

463
00:35:13,409 --> 00:35:15,219
OK, OK, I see. I see.

464
00:35:15,989 --> 00:35:17,530
Very nice. Very nice. Very nice.

465
00:35:17,639 --> 00:35:19,679
So instead of having this right,

466
00:35:19,989 --> 00:35:23,280
uh, we can have something like like people did.

467
00:35:23,290 --> 00:35:25,679
And I'll tell you the drawbacks between both of these.

468
00:35:25,810 --> 00:35:28,580
But for now, let's let's go with this. Superheroes

469
00:35:28,889 --> 00:35:30,389
right dot map.

470
00:35:31,500 --> 00:35:33,120
And then for each of the item,

471
00:35:33,419 --> 00:35:36,370
what I want to do is, uh, return a list

472
00:35:36,979 --> 00:35:37,590
right

473
00:35:38,409 --> 00:35:40,949
where the name should be.

474
00:35:41,780 --> 00:35:43,070
Item dot name.

475
00:35:43,409 --> 00:35:43,929
OK,

476
00:35:44,629 --> 00:35:46,199
I hope this makes sense

477
00:35:46,469 --> 00:35:47,120
to everyone.

478
00:35:53,110 --> 00:35:54,479
Is there anything which

479
00:35:55,219 --> 00:35:56,870
it's causing a problem here?

480
00:36:06,229 --> 00:36:07,949
Superheroes do

481
00:36:08,139 --> 00:36:08,629
map

482
00:36:10,120 --> 00:36:10,860
and

483
00:36:11,159 --> 00:36:13,290
item, and I want to

484
00:36:14,500 --> 00:36:15,100
OK,

485
00:36:15,439 --> 00:36:19,729
right. And here I can. What I can do is I can just return the names,

486
00:36:19,979 --> 00:36:20,419
right?

487
00:36:23,239 --> 00:36:24,469
I believe this would work.

488
00:36:24,649 --> 00:36:25,280
Yes,

489
00:36:26,010 --> 00:36:26,540
does it?

490
00:36:29,070 --> 00:36:29,590
OK,

491
00:36:29,830 --> 00:36:32,439
but now what I can see is this So So?

492
00:36:32,449 --> 00:36:35,429
So can anyone tell me one drawback with this kind of approach

493
00:36:36,110 --> 00:36:40,080
of writing it here above and not inside it directly

494
00:36:42,459 --> 00:36:45,639
or is the same? Is it the same as you know, writing it here or writing it here

495
00:36:45,989 --> 00:36:49,570
and just exploring right II? I would also explore the answer with you as well.

496
00:36:49,790 --> 00:36:51,540
It is something new for me as well, right.

497
00:36:51,790 --> 00:36:52,830
But II, I would

498
00:36:53,629 --> 00:36:55,800
prefer to write it inside this return

499
00:36:56,000 --> 00:36:57,159
rather than here.

500
00:36:58,070 --> 00:36:59,050
So any

501
00:37:00,239 --> 00:37:02,219
any hints on why I would want to do that?

502
00:37:02,449 --> 00:37:03,010
Anyone

503
00:37:04,250 --> 00:37:06,340
let that be? Let that warning be for now.

504
00:37:08,780 --> 00:37:09,389
Yes, You're

505
00:37:09,800 --> 00:37:11,330
going in the right direction. I believe so.

506
00:37:11,340 --> 00:37:12,949
In the case of re render, what will happen?

507
00:37:19,570 --> 00:37:20,100
Ok,

508
00:37:21,780 --> 00:37:22,909
for now I can see it's

509
00:37:23,189 --> 00:37:24,469
pretty much working, right.

510
00:37:32,560 --> 00:37:34,899
That is something which I was wanting to look at, right.

511
00:37:35,120 --> 00:37:37,239
So I believe if if you put it,

512
00:37:37,629 --> 00:37:39,989
you know, um, outside here, Right.

513
00:37:40,659 --> 00:37:43,750
This thing will be calculated every time

514
00:37:44,199 --> 00:37:45,550
this tree is made,

515
00:37:45,760 --> 00:37:46,239
right,

516
00:37:46,679 --> 00:37:47,389
so

517
00:37:47,659 --> 00:37:48,070
and

518
00:37:48,429 --> 00:37:50,239
are right in in this particular scenario.

519
00:37:50,250 --> 00:37:54,290
So whenever we are, you know, triggering a render, what will happen is this will run.

520
00:37:54,300 --> 00:37:54,830
This is

521
00:37:55,929 --> 00:37:58,820
fine. This is assignment, right? But this is a calculation, right?

522
00:37:58,830 --> 00:38:01,260
Kind of, you know, creating a new area out of our existing one.

523
00:38:01,459 --> 00:38:04,489
This is this is some calculation which, uh, reactors are forming.

524
00:38:05,129 --> 00:38:07,560
But since it is not inside the return right,

525
00:38:08,139 --> 00:38:11,290
what will happen is it will calculate it again and then like,

526
00:38:11,320 --> 00:38:13,550
like the whatever the value is, it will put it here.

527
00:38:13,739 --> 00:38:16,040
So No matter if you're even changing this or not,

528
00:38:16,050 --> 00:38:19,199
any change will just trigger the recalculation of this whole array.

529
00:38:19,209 --> 00:38:23,060
Now, I suppose there are 1000 names. Or maybe if it's an infinite list, right?

530
00:38:23,070 --> 00:38:23,830
If if you are

531
00:38:23,979 --> 00:38:25,860
simulating a list, which is, you know,

532
00:38:26,120 --> 00:38:26,739
um,

533
00:38:26,979 --> 00:38:29,500
having maybe lacks of,

534
00:38:29,820 --> 00:38:30,659
um uh

535
00:38:30,760 --> 00:38:34,810
of of entries in here, then this calculation will become a bit heavy.

536
00:38:34,820 --> 00:38:37,310
And since javascript is working one by one, right, it might

537
00:38:37,800 --> 00:38:39,489
cause some issues. Right

538
00:38:39,659 --> 00:38:42,780
When you're entering your page again and again, does that make sense to everyone?

539
00:38:43,300 --> 00:38:47,239
Like, are you putting it here? 11 caveat can be that it will be calculated again

540
00:38:47,399 --> 00:38:51,239
each time. This, um, whole thing is done, right, IIII.

541
00:38:51,250 --> 00:38:53,750
I don't have any solid way of checking it for now,

542
00:38:53,760 --> 00:38:57,189
but this is something which I can tell from conceptual examples.

543
00:38:57,199 --> 00:38:57,540
Right.

544
00:38:57,899 --> 00:38:58,429
But

545
00:38:58,840 --> 00:39:01,760
if if I find a better way of and like helping you, you know,

546
00:39:01,770 --> 00:39:03,939
get through this and I'll definitely

547
00:39:04,330 --> 00:39:05,120
go about doing it

548
00:39:05,659 --> 00:39:07,520
here What? What's happening is

549
00:39:07,689 --> 00:39:09,280
in this particular scenario,

550
00:39:09,969 --> 00:39:11,010
what's happening is

551
00:39:11,209 --> 00:39:13,080
this is, you know,

552
00:39:13,300 --> 00:39:15,310
being done by react. OK,

553
00:39:15,459 --> 00:39:17,709
so this is something which is calculated by react and once

554
00:39:17,719 --> 00:39:20,399
made into these elements and listen to these elements are changing.

555
00:39:20,409 --> 00:39:20,750
Right?

556
00:39:21,000 --> 00:39:21,750
Um

557
00:39:22,139 --> 00:39:24,189
it will not touch these particular

558
00:39:24,620 --> 00:39:26,439
elements as far as I think.

559
00:39:26,969 --> 00:39:27,479
Right?

560
00:39:28,030 --> 00:39:28,739
So

561
00:39:29,060 --> 00:39:33,540
one thing which we may do quickly if

562
00:39:33,760 --> 00:39:35,100
it allows us

563
00:39:35,459 --> 00:39:36,300
is

564
00:39:36,560 --> 00:39:38,719
suppose Let's add a button in here right

565
00:39:40,560 --> 00:39:41,229
button.

566
00:39:42,489 --> 00:39:43,360
And

567
00:39:43,919 --> 00:39:46,939
in this button, what I can do is on click

568
00:39:48,379 --> 00:39:49,149
one clip

569
00:39:50,699 --> 00:39:53,860
console dot log, click.

570
00:39:54,679 --> 00:39:55,489
And,

571
00:39:55,679 --> 00:39:57,689
uh, what should I name this button

572
00:40:01,989 --> 00:40:02,600
button?

573
00:40:03,189 --> 00:40:03,679
OK,

574
00:40:04,439 --> 00:40:08,189
and if I open it in a new window, let me see if something happens.

575
00:40:09,510 --> 00:40:10,000
OK,

576
00:40:11,459 --> 00:40:13,189
so right now I have this

577
00:40:13,989 --> 00:40:15,620
And if I am clicking it,

578
00:40:22,760 --> 00:40:23,719
Hm

579
00:40:28,229 --> 00:40:29,560
there is Maria

580
00:40:29,719 --> 00:40:30,560
Tools

581
00:40:31,409 --> 00:40:32,280
component

582
00:40:33,239 --> 00:40:34,739
settings

583
00:40:35,139 --> 00:40:35,580
I like

584
00:40:36,590 --> 00:40:39,899
There's already some problem with the react will not be

585
00:40:40,080 --> 00:40:43,120
working perfectly fine. I will not be able to show you the example till I

586
00:40:43,340 --> 00:40:45,090
make this list perfectly fine,

587
00:40:45,419 --> 00:40:49,020
But OK, I'll, I'll go ahead and do that later. Actually,

588
00:40:49,129 --> 00:40:51,540
OK, I was trying to bring up some example to see if,

589
00:40:51,550 --> 00:40:53,560
uh basically if I click on the button

590
00:40:53,709 --> 00:40:56,219
if all these things enter again or not, Right,

591
00:40:56,229 --> 00:40:58,090
So that is something which I was trying to look at,

592
00:40:58,340 --> 00:41:01,040
but OK, no worries. I. I try to do that later,

593
00:41:01,449 --> 00:41:03,149
OK? So this would be actually

594
00:41:03,669 --> 00:41:04,500
a right way.

595
00:41:04,969 --> 00:41:05,389
Right?

596
00:41:07,330 --> 00:41:09,580
Uh, console dot Log in a map.

597
00:41:11,090 --> 00:41:12,169
Uh,

598
00:41:12,350 --> 00:41:15,199
maybe, Maybe, but Reactor is telling me some other

599
00:41:15,540 --> 00:41:16,449
error. Right? So

600
00:41:16,669 --> 00:41:19,889
first we will get to that error, we'll understand what that error was,

601
00:41:20,100 --> 00:41:21,610
right. And then we'll come back to it.

602
00:41:21,959 --> 00:41:22,459
OK,

603
00:41:22,939 --> 00:41:23,649
so now,

604
00:41:23,659 --> 00:41:27,649
once we I hope everyone understands how we are able to do this this particular thing,

605
00:41:28,209 --> 00:41:28,780
Yes,

606
00:41:35,899 --> 00:41:36,030
food.

607
00:41:37,310 --> 00:41:40,889
So now we can, like, render any number of elements dynamically now, OK,

608
00:41:40,899 --> 00:41:43,360
so once we have an A a, we can practically go ahead and, you know,

609
00:41:43,370 --> 00:41:45,570
render any number of elements dynamically.

610
00:41:46,060 --> 00:41:46,560
OK,

611
00:41:47,010 --> 00:41:47,719
so

612
00:41:49,719 --> 00:41:52,530
why did we not have superheroes as a state variable?

613
00:41:52,540 --> 00:41:55,489
This was one question which I popped in, popped into my mind.

614
00:41:55,639 --> 00:42:01,510
So superheroes was kind of a constant thing right in here instead of having you know,

615
00:42:01,520 --> 00:42:06,310
a state as a state variable like superheroes and said superheroes equal to you state

616
00:42:06,449 --> 00:42:07,750
and then this value

617
00:42:07,939 --> 00:42:08,810
or something like that.

618
00:42:09,050 --> 00:42:10,409
And any guesses on why

619
00:42:10,870 --> 00:42:11,800
we did not

620
00:42:11,949 --> 00:42:12,679
went to that?

621
00:42:12,810 --> 00:42:15,550
So this this is something which can be asked you during an interview at the

622
00:42:16,060 --> 00:42:19,669
so once you're going in an interview, Uh, an interview might ask you that.

623
00:42:19,870 --> 00:42:23,469
Why would you like when? At what point of point of time would you

624
00:42:23,679 --> 00:42:26,939
use, uh, state variables to store a value?

625
00:42:26,949 --> 00:42:29,260
And at what point of time would you use, you know,

626
00:42:29,270 --> 00:42:31,979
local variables to store the value or something like normal variables?

627
00:42:34,110 --> 00:42:35,860
Any guesses on this one? One?

628
00:42:38,419 --> 00:42:40,350
Yeah. OK, nice. Nice answer.

629
00:42:41,469 --> 00:42:44,810
Any other, Any other answers? Any other speculations here?

630
00:42:48,919 --> 00:42:50,370
Ok, we has another Interesting,

631
00:42:50,379 --> 00:42:53,760
but we don't want to give the user the control over this fair point.

632
00:42:54,340 --> 00:42:54,810
Right?

633
00:43:02,590 --> 00:43:04,530
OK, ok, so the She also says that,

634
00:43:04,879 --> 00:43:08,600
um if you have to update the data, then only it is needed. Right?

635
00:43:08,750 --> 00:43:12,919
So superhero elements aren't changing here, right? If you if you need,

636
00:43:13,129 --> 00:43:17,489
uh you know, if you use state if you want the U I to render on state change, right?

637
00:43:17,629 --> 00:43:18,439
So right now,

638
00:43:18,449 --> 00:43:20,899
since Super Hero is already fixed in in our approach

639
00:43:20,909 --> 00:43:23,530
for now we don't want the U I to render again

640
00:43:23,659 --> 00:43:26,129
right? Super state changes the U. I must

641
00:43:26,530 --> 00:43:26,959
like

642
00:43:27,179 --> 00:43:27,439
to

643
00:43:27,770 --> 00:43:28,790
Yes, um,

644
00:43:29,560 --> 00:43:31,469
in the last session we did that. I believe

645
00:43:31,790 --> 00:43:35,629
so When when when there was a U I change the whole, um,

646
00:43:36,050 --> 00:43:37,919
like return was you know,

647
00:43:37,929 --> 00:43:40,860
whole function was called again basically right whole function was done again.

648
00:43:40,989 --> 00:43:43,149
So right now we do not want that

649
00:43:43,540 --> 00:43:48,300
Whatever you are looking at here is like normal superheroes which are fixed.

650
00:43:48,310 --> 00:43:50,770
You know, we are not getting it from an API. We are not

651
00:43:50,909 --> 00:43:56,229
allowing it to change, you know, over time. Hence we are keeping it as a fixed value.

652
00:43:56,459 --> 00:44:00,120
OK, so that was one reason why we did not have it as a state video video.

653
00:44:00,770 --> 00:44:01,250
OK,

654
00:44:01,389 --> 00:44:02,429
does that make sense?

655
00:44:05,030 --> 00:44:06,120
Does that make sense to everyone

656
00:44:07,110 --> 00:44:07,479
or not?

657
00:44:08,040 --> 00:44:10,360
So your answers were somewhat right. I mean,

658
00:44:10,520 --> 00:44:12,250
I think you're all getting ready for

659
00:44:12,739 --> 00:44:14,800
this kind of interviews. If you appear for it

660
00:44:15,370 --> 00:44:15,919
right

661
00:44:16,570 --> 00:44:17,159
so slowly and get

662
00:44:17,280 --> 00:44:18,020
you, you get that.

663
00:44:18,419 --> 00:44:18,989
OK?

664
00:44:19,159 --> 00:44:22,219
Something which I'll give you now. OK, let let me put

665
00:44:22,620 --> 00:44:23,449
uh, let

666
00:44:23,600 --> 00:44:25,729
let me give you some starter code. Ok?

667
00:44:26,189 --> 00:44:27,899
So let me give you this starter code.

668
00:44:28,199 --> 00:44:29,239
Put this

669
00:44:29,340 --> 00:44:31,840
or or basically I'll give you the whole starter code for the app.

670
00:44:32,830 --> 00:44:33,280
OK?

671
00:44:34,379 --> 00:44:37,169
Use the starter code for the app, which I've just shared.

672
00:44:37,360 --> 00:44:40,030
Uh ignore the above one. Right? If you can,

673
00:44:40,260 --> 00:44:40,919
please.

674
00:44:41,409 --> 00:44:41,909
Right.

675
00:44:45,570 --> 00:44:49,300
Use the use the starter code below. Right, which I have just shared. Right.

676
00:44:50,090 --> 00:44:50,580
OK,

677
00:45:00,540 --> 00:45:04,300
once you are done plus one in the chart. So this you replace your

678
00:45:06,129 --> 00:45:07,979
app with this particular thing? Ok,

679
00:45:08,129 --> 00:45:09,179
I will also do it

680
00:45:09,669 --> 00:45:11,060
so I will change my app

681
00:45:12,129 --> 00:45:13,260
so

682
00:45:14,929 --> 00:45:15,580
to this

683
00:45:25,159 --> 00:45:29,389
And I also have to call you state from you.

684
00:45:35,219 --> 00:45:35,399
Um

685
00:45:40,850 --> 00:45:41,429
OK,

686
00:45:43,439 --> 00:45:45,469
this is very painful that I have to

687
00:45:47,139 --> 00:45:47,870
the move

688
00:45:48,120 --> 00:45:49,379
see again and again

689
00:45:54,189 --> 00:45:54,540
Mhm,

690
00:45:55,419 --> 00:45:55,709
No!

691
00:45:59,350 --> 00:45:59,739
OK,

692
00:46:00,939 --> 00:46:04,689
so this would be your starter code. Once you're done, just let me know, OK?

693
00:46:04,879 --> 00:46:07,120
This could be the starter code which you're looking at

694
00:46:07,360 --> 00:46:08,709
once you're done, just let me know.

695
00:46:09,659 --> 00:46:10,479
Plus one in the chat.

696
00:46:10,489 --> 00:46:11,600
Once you're done with the starter code,

697
00:46:11,610 --> 00:46:13,689
you don't need to understand what it's doing for now.

698
00:46:13,989 --> 00:46:16,320
OK? How we are getting all this function and all that

699
00:46:16,699 --> 00:46:18,429
Don't need to worry. Worry about it.

700
00:46:19,610 --> 00:46:20,750
Uh, lists

701
00:46:21,169 --> 00:46:22,179
as well. Ok,

702
00:46:22,810 --> 00:46:23,939
so this is the list

703
00:46:41,129 --> 00:46:43,580
once you're done plus one in the chat. Once you are done with this,

704
00:46:55,810 --> 00:46:55,820
I

705
00:46:55,929 --> 00:46:57,500
hope the pace is fine for everyone.

706
00:46:59,479 --> 00:47:01,050
Was it fast or slow? It fine.

707
00:47:06,030 --> 00:47:06,520
OK,

708
00:47:07,389 --> 00:47:10,080
once we're done with this, just let me know, OK?

709
00:47:10,520 --> 00:47:11,449
Listen, in the chat

710
00:47:11,739 --> 00:47:14,610
so that I may know that you are you are ready with the starter code

711
00:47:15,280 --> 00:47:18,219
and we will see something interesting going on in here. OK,

712
00:47:18,719 --> 00:47:22,629
so basically, what if if I have to quickly explain this, what would happen here is,

713
00:47:23,110 --> 00:47:27,050
uh this function will essentially just

714
00:47:27,280 --> 00:47:32,590
shuffle this data right, which is in superheroes and then set the, uh,

715
00:47:32,620 --> 00:47:34,949
shuffled data into superheroes.

716
00:47:35,090 --> 00:47:35,679
OK,

717
00:47:36,159 --> 00:47:37,679
so we're starting with some data

718
00:47:37,860 --> 00:47:38,379
right

719
00:47:38,550 --> 00:47:39,169
in here,

720
00:47:39,360 --> 00:47:42,649
and then you want, uh, to shuffle it using a button.

721
00:47:42,810 --> 00:47:45,399
This function is essentially just shuffling it right?

722
00:47:45,409 --> 00:47:46,580
It comes from this particular

723
00:47:46,709 --> 00:47:47,550
link

724
00:47:47,969 --> 00:47:49,560
if you want to visit it,

725
00:47:49,899 --> 00:47:50,449
right,

726
00:47:51,340 --> 00:47:52,250
and, uh,

727
00:47:54,010 --> 00:47:55,419
I hope everyone's ready with this.

728
00:47:56,370 --> 00:47:57,989
So use this version of app dot Js,

729
00:47:58,000 --> 00:48:00,459
which allows to shuffle the order of the check boxes.

730
00:48:00,989 --> 00:48:01,459
Right.

731
00:48:02,419 --> 00:48:04,949
Shuffle a shuffle button and it's

732
00:48:05,379 --> 00:48:06,000
and

733
00:48:06,139 --> 00:48:08,560
it's on click handler. Right Will be there.

734
00:48:08,969 --> 00:48:11,909
And clicking the button shuffles the super superhero state elements.

735
00:48:12,139 --> 00:48:13,409
OK, does that make sense?

736
00:48:13,879 --> 00:48:15,429
And superheroes will be at stake.

737
00:48:16,909 --> 00:48:19,000
Check the 1st 1st element displayed

738
00:48:19,209 --> 00:48:19,729
OK,

739
00:48:20,399 --> 00:48:23,239
and then try clicking the button to shuffle the order of element displayed.

740
00:48:23,250 --> 00:48:24,320
Would you be able to do that?

741
00:48:24,560 --> 00:48:27,489
Because the 1st, 1st of all, I have the winter soldier. Ok,

742
00:48:27,679 --> 00:48:29,629
the second is iron Man. Third is black widow.

743
00:48:29,939 --> 00:48:33,399
So in my first one, if I check it and if I click shuffle A right,

744
00:48:33,409 --> 00:48:35,709
you do it first and then let me know what what happens.

745
00:48:37,750 --> 00:48:40,030
You do it first and see if you find something weird happening.

746
00:48:47,830 --> 00:48:49,560
Do you find any weird behaviour which is happening?

747
00:48:51,459 --> 00:48:52,909
I'm shuffling this R A

748
00:48:55,469 --> 00:48:57,000
but winter soldier is not,

749
00:48:57,850 --> 00:48:59,560
you know, take constantly,

750
00:48:59,969 --> 00:49:01,979
right? So if I check the last one,

751
00:49:02,290 --> 00:49:04,530
right? Always. The last one is checked,

752
00:49:04,820 --> 00:49:05,399
right?

753
00:49:06,919 --> 00:49:09,969
In any case, And in any case, I'm shuffling right because there are only three.

754
00:49:09,979 --> 00:49:12,250
So shuffle will be like pretty pretty bad,

755
00:49:12,580 --> 00:49:15,179
right? Shuffle, shuffle scenario will be pretty bad.

756
00:49:15,429 --> 00:49:16,169
But still,

757
00:49:18,989 --> 00:49:21,320
uh, objects are not valid as the actual Children.

758
00:49:21,330 --> 00:49:24,100
Uh, if you want to enter a collection,

759
00:49:25,610 --> 00:49:29,800
uh, in this scenario, are you using this list

760
00:49:29,919 --> 00:49:30,659
correctly?

761
00:49:31,020 --> 00:49:33,209
Are you using the right starter code?

762
00:49:34,879 --> 00:49:35,280
You know,

763
00:49:36,189 --> 00:49:38,459
you can use the same code, which I am using. OK,

764
00:49:38,719 --> 00:49:39,760
use the same

765
00:49:40,270 --> 00:49:43,800
use the same exact code. OK, don't don't change it. Anything else?

766
00:49:43,810 --> 00:49:45,520
Maybe something else is interfering

767
00:49:51,250 --> 00:49:53,060
for other people. Can you see the,

768
00:49:53,790 --> 00:49:54,610
um,

769
00:49:56,610 --> 00:49:58,610
issue which is happening here? Right.

770
00:49:58,860 --> 00:50:00,500
So if I start with a fresh

771
00:50:00,800 --> 00:50:02,229
fresh fresh

772
00:50:03,209 --> 00:50:03,929
with, like a

773
00:50:04,280 --> 00:50:05,139
page

774
00:50:05,300 --> 00:50:08,820
and once my dorm is ready, right, I'm clicking on the first one.

775
00:50:09,100 --> 00:50:10,360
I'm clicking Shuffle R A.

776
00:50:10,739 --> 00:50:12,780
It's shuffling the R a somehow,

777
00:50:13,149 --> 00:50:15,290
but it is not changing

778
00:50:15,540 --> 00:50:18,159
the check button, which should have changed. Technically,

779
00:50:19,110 --> 00:50:20,159
does that make sense

780
00:50:23,449 --> 00:50:24,100
or not?

781
00:50:32,080 --> 00:50:36,090
The selected checkbox is staying on the same position, even if the element changes.

782
00:50:36,459 --> 00:50:36,979
OK,

783
00:50:37,209 --> 00:50:39,219
so this is a weird behaviour which is happening.

784
00:50:39,350 --> 00:50:40,620
Was it expected

785
00:50:40,989 --> 00:50:42,679
to happen or like, is it

786
00:50:43,020 --> 00:50:44,489
some some error which is happening?

787
00:50:45,340 --> 00:50:45,510
So

788
00:50:45,760 --> 00:50:47,189
what? What I'm saying here is

789
00:50:47,870 --> 00:50:49,729
if we restart, you know this this we

790
00:50:49,850 --> 00:50:51,000
refresh this page.

791
00:50:51,120 --> 00:50:54,800
What's happening here is I am using this shuffle function, right.

792
00:50:54,810 --> 00:50:56,169
You don't have to worry about what it does.

793
00:50:56,320 --> 00:50:57,459
What I tell you is it

794
00:50:57,729 --> 00:51:01,060
is the R a elements. OK, so whatever a elements you pass in,

795
00:51:01,280 --> 00:51:04,080
it will shuffle the R elements and then put it back to,

796
00:51:04,530 --> 00:51:06,060
uh, the original state. Right?

797
00:51:06,070 --> 00:51:08,879
So in this superhero state, I'm having starting with this data.

798
00:51:09,219 --> 00:51:12,699
Right? And, uh, I have a button which would call these shuffle Super

799
00:51:13,179 --> 00:51:13,250
A A.

800
00:51:13,629 --> 00:51:16,780
And this logic basically will create a shuffled

801
00:51:16,919 --> 00:51:17,090
A

802
00:51:17,340 --> 00:51:17,889
right.

803
00:51:18,120 --> 00:51:20,639
And we are changing the original superhero.

804
00:51:20,649 --> 00:51:23,729
I mean, we are changing this superhero state right

805
00:51:23,959 --> 00:51:25,560
inside this function as well.

806
00:51:26,179 --> 00:51:26,699
Ok,

807
00:51:27,620 --> 00:51:30,810
so we either, like, we are not changing the initial state. Right.

808
00:51:31,090 --> 00:51:32,479
But we are changing the,

809
00:51:32,830 --> 00:51:33,610
um,

810
00:51:35,199 --> 00:51:36,709
uh, current state, which is there,

811
00:51:36,840 --> 00:51:39,169
right? And this current state is being used

812
00:51:39,399 --> 00:51:40,209
to,

813
00:51:40,459 --> 00:51:43,300
uh, create a list of superheroes on the screen.

814
00:51:43,590 --> 00:51:44,139
Right?

815
00:51:44,580 --> 00:51:46,909
And we're passing the name of the superhero inside it.

816
00:51:47,810 --> 00:51:51,429
The problem which is happening here is if I'm clicking on this one,

817
00:51:52,770 --> 00:51:55,139
checkbox And if I'm clicking shuffle R A

818
00:51:55,580 --> 00:51:57,340
it shuffles the R a somehow.

819
00:51:57,530 --> 00:51:58,000
But

820
00:51:58,879 --> 00:52:00,939
the checked element is still on the first one.

821
00:52:01,060 --> 00:52:02,229
It's not moved

822
00:52:02,350 --> 00:52:04,870
along with the other items which are there.

823
00:52:05,149 --> 00:52:08,040
Does that make sense? Kavitha, what's happening? Do you understand this scenario?

824
00:52:08,050 --> 00:52:09,540
What's happening? The problem which is happening? Yes.

825
00:52:09,719 --> 00:52:09,939
Yes,

826
00:52:10,209 --> 00:52:11,300
I understood that.

827
00:52:11,979 --> 00:52:13,070
Yeah. Any other doubts?

828
00:52:13,979 --> 00:52:15,250
Um, no.

829
00:52:16,800 --> 00:52:16,870
Cool. Cool.

830
00:52:17,040 --> 00:52:17,070
Cool.

831
00:52:18,199 --> 00:52:19,389
Yes, I just repeated it.

832
00:52:23,010 --> 00:52:24,310
Try to be a bit more,

833
00:52:24,760 --> 00:52:24,770
uh,

834
00:52:25,449 --> 00:52:27,379
to the class, OK? Confused.

835
00:52:27,520 --> 00:52:28,199
Cool.

836
00:52:28,469 --> 00:52:29,419
Uh,

837
00:52:29,739 --> 00:52:31,070
at what part are you gonna choose

838
00:52:34,709 --> 00:52:37,270
then? Basically, uh, but But they are part of the same,

839
00:52:37,439 --> 00:52:38,159
um,

840
00:52:39,929 --> 00:52:41,080
same component, right?

841
00:52:42,030 --> 00:52:44,679
So they should technically be moved up and down.

842
00:52:45,959 --> 00:52:46,610
Yes or no?

843
00:52:51,469 --> 00:52:53,939
So all these three are different components altogether,

844
00:52:54,290 --> 00:52:54,800
right?

845
00:52:55,780 --> 00:52:56,290
I mean,

846
00:52:58,120 --> 00:53:00,340
coming from the same component. But they are, like,

847
00:53:00,879 --> 00:53:02,500
rendered separately on the,

848
00:53:02,770 --> 00:53:03,459
um

849
00:53:03,810 --> 00:53:07,020
on the dom. Right? So they are independent of each other technically,

850
00:53:07,189 --> 00:53:09,610
but, uh, yes. What's happening here is

851
00:53:09,830 --> 00:53:11,169
whenever I'm clicking this,

852
00:53:11,510 --> 00:53:14,979
I suppose if I If I check this particular, uh, this first one, right,

853
00:53:15,179 --> 00:53:15,449
So

854
00:53:15,649 --> 00:53:17,969
so that if I'm checking and if I'm clicking the shuffle

855
00:53:18,110 --> 00:53:18,120
A

856
00:53:18,379 --> 00:53:19,729
So it is shuffling the

857
00:53:19,939 --> 00:53:21,260
order of

858
00:53:21,419 --> 00:53:22,510
the, um,

859
00:53:23,010 --> 00:53:24,300
elements which are here.

860
00:53:24,560 --> 00:53:25,120
Right?

861
00:53:25,550 --> 00:53:27,770
But it is still keeping the check.

862
00:53:28,209 --> 00:53:30,560
Like check the box as the first one. Only

863
00:53:30,909 --> 00:53:32,020
does that make sense?

864
00:53:33,270 --> 00:53:33,800
OK,

865
00:53:33,959 --> 00:53:35,879
so this is the problem. It should not happen.

866
00:53:35,889 --> 00:53:37,679
Actually, this is an unexpected behaviour,

867
00:53:38,040 --> 00:53:38,520
OK?

868
00:53:39,239 --> 00:53:41,229
And if you check

869
00:53:41,639 --> 00:53:43,820
the console tab of de twos right?

870
00:53:43,969 --> 00:53:46,010
There was something which the was telling us

871
00:53:46,330 --> 00:53:47,429
a lot of times.

872
00:53:48,000 --> 00:53:49,969
Don't don't worry about what this function does.

873
00:53:50,330 --> 00:53:50,780
OK?

874
00:53:50,899 --> 00:53:52,580
Don't worry about actually what this function

875
00:53:52,590 --> 00:53:54,010
is doing this function is shuffling the

876
00:53:54,120 --> 00:53:54,129
A

877
00:53:54,500 --> 00:53:55,679
If I write the

878
00:53:55,860 --> 00:53:56,620
dog for it,

879
00:53:57,040 --> 00:53:57,479
right,

880
00:53:57,860 --> 00:54:03,070
er this shuffles the superheroes

881
00:54:04,800 --> 00:54:04,810
A

882
00:54:05,590 --> 00:54:05,989
and

883
00:54:06,939 --> 00:54:07,929
updates,

884
00:54:09,399 --> 00:54:09,840
OK,

885
00:54:09,949 --> 00:54:11,889
you don't have to worry about how it does it, right.

886
00:54:11,899 --> 00:54:14,489
Just believe in the abstraction that it will shuffle the

887
00:54:14,969 --> 00:54:16,229
A A and it will give you something.

888
00:54:16,830 --> 00:54:17,360
OK,

889
00:54:18,090 --> 00:54:21,280
One error, which I am seeing constantly here, right?

890
00:54:21,570 --> 00:54:24,870
Is each child in the list should have a unique key crop.

891
00:54:25,120 --> 00:54:26,219
Does that make sense

892
00:54:26,899 --> 00:54:29,419
is unable to see this error, which is there?

893
00:54:30,310 --> 00:54:31,419
Does everyone see this set?

894
00:54:34,889 --> 00:54:38,110
So how we can resolve this is we can add a key here.

895
00:54:38,350 --> 00:54:38,889
OK,

896
00:54:39,000 --> 00:54:41,270
so to remove this kind of, uh, warning

897
00:54:41,780 --> 00:54:42,679
there's a special

898
00:54:43,300 --> 00:54:46,239
which is introduced when you are you know, um,

899
00:54:46,250 --> 00:54:49,669
using map or something which is absolutely needed when you're using a map

900
00:54:49,939 --> 00:54:54,659
is the key prop, OK? And this key prop should be something unique.

901
00:54:55,159 --> 00:54:55,669
OK,

902
00:54:55,879 --> 00:54:59,419
so superhero dot ID, for example, and in this scenario, OK,

903
00:54:59,459 --> 00:55:05,229
so once you start putting this key prop right and you can use it as superhero dot ID

904
00:55:05,439 --> 00:55:06,129
in here

905
00:55:06,379 --> 00:55:09,689
and once you are done with this, and if you refresh the page again,

906
00:55:09,959 --> 00:55:12,100
It will not give you that error anymore.

907
00:55:12,469 --> 00:55:14,530
In the in the console Can you see that?

908
00:55:16,070 --> 00:55:19,120
So this key prop is a special prop which react uses

909
00:55:19,580 --> 00:55:24,969
to identify where the element was on the screen right where the element was on the do

910
00:55:25,479 --> 00:55:28,889
So Now if I have the key prop And now if I try to shuffle,

911
00:55:28,969 --> 00:55:30,840
my checkbox is moving along with it.

912
00:55:31,100 --> 00:55:31,939
Can you see that?

913
00:55:35,300 --> 00:55:36,459
Yes. Can everyone

914
00:55:36,899 --> 00:55:38,989
see the same thing? See the same result?

915
00:55:40,729 --> 00:55:41,250
Yes.

916
00:55:41,479 --> 00:55:43,600
So this key prop basically tracks

917
00:55:43,959 --> 00:55:45,669
right? I'll come come to it What it does.

918
00:55:45,800 --> 00:55:47,280
So adding this key prop,

919
00:55:47,409 --> 00:55:49,709
uh, as suggested right by by reactor

920
00:55:49,969 --> 00:55:51,250
making the error go away

921
00:55:51,419 --> 00:55:51,870
right

922
00:55:52,050 --> 00:55:54,060
and you can set it to the elements ID value.

923
00:55:54,590 --> 00:55:56,280
OK, so there's there's no more error.

924
00:55:56,570 --> 00:55:57,370
But the thing is,

925
00:55:57,379 --> 00:56:01,820
this React uses these keys to identify a specific list element and its state

926
00:56:02,110 --> 00:56:02,600
OK,

927
00:56:02,729 --> 00:56:06,379
so to keep track of the elements and their state, Right.

928
00:56:06,389 --> 00:56:09,139
Uh, when when using a map kind of function or something like that.

929
00:56:10,020 --> 00:56:12,729
Key prop is very essential, actually. Right.

930
00:56:12,739 --> 00:56:17,540
So key prop there is There's a very detailed article on how key props actually work.

931
00:56:17,550 --> 00:56:19,479
But for now, what you can understand is, um,

932
00:56:20,000 --> 00:56:21,399
the act in its mind.

933
00:56:21,719 --> 00:56:22,280
Uh,

934
00:56:22,550 --> 00:56:24,350
when you're trying to map something, right,

935
00:56:24,360 --> 00:56:27,290
it it wants to uniquely identify each of the elements

936
00:56:27,870 --> 00:56:28,929
using something.

937
00:56:29,080 --> 00:56:31,729
OK, so this is there should be something

938
00:56:31,989 --> 00:56:36,899
to uniquely identify each of the dom elements so that it can keep track of its state.

939
00:56:36,909 --> 00:56:40,300
Right? So we are setting that key to the whole component altogether,

940
00:56:40,429 --> 00:56:43,290
OK, or whatever. You know, we are returning from the,

941
00:56:43,409 --> 00:56:46,969
uh, JSX, right. We are setting the key prop to that. Suppose if,

942
00:56:47,320 --> 00:56:48,409
for example,

943
00:56:48,580 --> 00:56:51,530
there would be a Dev or something like that, right? So if there's a Dev

944
00:56:52,090 --> 00:56:53,639
and here's a Dev again

945
00:56:54,219 --> 00:56:54,760
OK,

946
00:56:55,020 --> 00:56:56,919
so then, uh, the Dev would, uh,

947
00:56:57,110 --> 00:56:59,610
like the Dev should have this key. OK,

948
00:56:59,750 --> 00:57:01,530
so it goes to the outermost,

949
00:57:01,750 --> 00:57:04,860
um JSX element is the parent JSX element here.

950
00:57:05,239 --> 00:57:05,760
OK,

951
00:57:06,270 --> 00:57:07,350
does that make sense

952
00:57:09,080 --> 00:57:11,120
so that react can keep track of that

953
00:57:11,500 --> 00:57:12,709
element, Which is there

954
00:57:12,830 --> 00:57:16,830
OK, the whole whole thing, which is return from the map. It can keep track of it.

955
00:57:17,820 --> 00:57:18,330
OK,

956
00:57:18,469 --> 00:57:22,280
so if you have a Dev here right, if you have some other parent uh, element.

957
00:57:22,820 --> 00:57:25,290
You put the key prop for the first,

958
00:57:25,419 --> 00:57:28,909
uh, like the outermost parent which you're returning. Does that make sense?

959
00:57:30,909 --> 00:57:33,939
OK, so this is the way you use keys and like, there's there's no,

960
00:57:34,159 --> 00:57:34,800
uh,

961
00:57:37,020 --> 00:57:38,080
and mention or something like that.

962
00:57:38,090 --> 00:57:40,530
This is the actual syntax on how you would use keys.

963
00:57:40,899 --> 00:57:41,459
OK?

964
00:57:43,050 --> 00:57:47,050
Huh? Is it required only for eye travels? Mostly, it is used for eye travels.

965
00:57:47,060 --> 00:57:49,870
There are two things I can still figure out how how they are working.

966
00:57:50,080 --> 00:57:53,270
But since I travels are, you know, kind of, uh

967
00:57:53,870 --> 00:57:55,169
things which are,

968
00:57:55,330 --> 00:57:58,139
you know, which you are generalising right? Which you are bringing in from

969
00:57:58,270 --> 00:58:01,979
a single element, which is which, Which should work work exactly the same,

970
00:58:02,149 --> 00:58:04,780
right? What should be the differentiating factor in here?

971
00:58:04,790 --> 00:58:06,139
So the differentiating factor,

972
00:58:06,370 --> 00:58:09,489
uh, generally does not is not the prop, right?

973
00:58:09,669 --> 00:58:13,290
Because prop values are again, you know, very subjective change subject to change

974
00:58:13,429 --> 00:58:15,870
keys should be something which are not changing.

975
00:58:16,209 --> 00:58:16,709
OK,

976
00:58:16,860 --> 00:58:18,929
The key should be something which should be unique

977
00:58:19,320 --> 00:58:20,419
in the Dom

978
00:58:20,719 --> 00:58:21,239
tree.

979
00:58:21,709 --> 00:58:25,780
Does that make sense? So there should be no colliding keys, so we can think of it as

980
00:58:25,919 --> 00:58:30,379
kind of an, uh, ID element, which, which we were using earlier in normal JavaScript

981
00:58:30,580 --> 00:58:35,080
right here when you you don't need an ID element, right? Uh, specifically.

982
00:58:35,699 --> 00:58:39,270
And then we need an ID element to just pick up, uh,

983
00:58:39,280 --> 00:58:41,739
the for for this pick up the element for the CS S

984
00:58:41,909 --> 00:58:45,600
here. It's actually very essential to have a unique identifier,

985
00:58:45,820 --> 00:58:46,919
like a key,

986
00:58:47,020 --> 00:58:47,540
right,

987
00:58:47,649 --> 00:58:49,560
which is a non changing thing, right,

988
00:58:49,570 --> 00:58:52,709
Which is a non changing element that is very essential and important.

989
00:58:52,719 --> 00:58:55,260
OK, I'll tell you what a non changing element and changing element would,

990
00:58:55,530 --> 00:58:58,169
um, like cause an error fall.

991
00:58:58,510 --> 00:58:59,000
OK,

992
00:58:59,159 --> 00:59:00,639
so suppose, for example.

993
00:59:01,010 --> 00:59:02,719
Suppose, for example, instead of the,

994
00:59:02,860 --> 00:59:04,409
uh, ID, right,

995
00:59:04,840 --> 00:59:09,050
I believe people know that you can also have the index in the map.

996
00:59:09,270 --> 00:59:11,080
Do people know about it? Yes or no?

997
00:59:12,320 --> 00:59:15,199
So if you use the index in here right, let's let's

998
00:59:15,689 --> 00:59:18,830
use a single thing. Well, let's not use.

999
00:59:21,169 --> 00:59:22,449
Let's not use this.

1000
00:59:23,179 --> 00:59:24,189
And

1001
00:59:24,899 --> 00:59:29,080
I hope people know about that. Your map function can have two arguments. One is the,

1002
00:59:29,310 --> 00:59:31,919
uh, item. And second is the index, yes or no?

1003
00:59:32,169 --> 00:59:34,219
Everyone, even if you don't know now, you know.

1004
00:59:34,429 --> 00:59:34,919
OK,

1005
00:59:35,110 --> 00:59:38,429
so that your map function. Whatever call back it takes takes in

1006
00:59:38,590 --> 00:59:42,909
it can take in two values. Uh, primarily which is one is the item itself.

1007
00:59:42,919 --> 00:59:44,520
And second is the index of that item.

1008
00:59:44,830 --> 00:59:48,120
OK? And then try to set the key as the index of that item, OK?

1009
00:59:48,270 --> 00:59:51,250
And then try to follow the behaviour again and see

1010
00:59:51,429 --> 00:59:53,350
if it works or not.

1011
00:59:55,080 --> 00:59:55,810
Does it work?

1012
00:59:57,000 --> 00:59:58,679
Or is it still back to the original letter?

1013
00:59:59,719 --> 01:00:02,050
Which which will bug which we are already having?

1014
01:00:06,280 --> 01:00:09,830
I only have this one, right? So I only have only have the single,

1015
01:00:10,169 --> 01:00:10,870
um

1016
01:00:11,610 --> 01:00:12,610
element, which I'm returning

1017
01:00:12,770 --> 01:00:13,050
Karachi.

1018
01:00:13,179 --> 01:00:15,060
Right? I removed that development actually,

1019
01:00:15,469 --> 01:00:18,949
OK, it was not needed for the time being. If you want, I can bring that back.

1020
01:00:19,060 --> 01:00:20,090
If if that's

1021
01:00:20,570 --> 01:00:23,850
something which does not confuse you I mean, I thought it might confuse people,

1022
01:00:23,860 --> 01:00:26,189
so I removed that for for for now.

1023
01:00:26,530 --> 01:00:27,020
Ok,

1024
01:00:27,489 --> 01:00:29,370
since I'm having only a single element which I'm

1025
01:00:29,379 --> 01:00:31,790
returning out of this map functions call back.

1026
01:00:31,800 --> 01:00:32,149
Right?

1027
01:00:32,699 --> 01:00:35,830
So I would definitely put the key in there only

1028
01:00:36,110 --> 01:00:37,110
Does that make sense? Rashi,

1029
01:00:38,610 --> 01:00:40,340
is there any doubt or confusion in this?

1030
01:00:41,070 --> 01:00:42,209
So I had like,

1031
01:00:42,959 --> 01:00:44,100
if there was any

1032
01:00:44,340 --> 01:00:45,870
There was something like that right

1033
01:00:46,500 --> 01:00:47,159
in here.

1034
01:00:48,540 --> 01:00:49,870
Then the key would be

1035
01:00:51,560 --> 01:00:52,679
a part of this.

1036
01:00:53,459 --> 01:00:54,020
OK,

1037
01:00:54,159 --> 01:00:55,459
if it is not there

1038
01:00:55,689 --> 01:00:57,489
and if you're returning just a single element,

1039
01:00:57,659 --> 01:00:59,729
then the key would be part of that single element too.

1040
01:01:00,530 --> 01:01:01,080
OK,

1041
01:01:01,929 --> 01:01:04,010
so with the the behaviour which I want you all to

1042
01:01:04,020 --> 01:01:06,830
observe is that if you are trying to put key as index

1043
01:01:07,060 --> 01:01:09,060
right, it is not giving the error.

1044
01:01:09,379 --> 01:01:10,969
But the bug is still there.

1045
01:01:11,489 --> 01:01:13,229
It's not giving us the warning anymore.

1046
01:01:13,469 --> 01:01:15,939
But the bug, which we were facing earlier, is still there.

1047
01:01:17,419 --> 01:01:18,459
Yes or no?

1048
01:01:18,790 --> 01:01:20,979
Is it there or no? Yes or no? Why you in?

1049
01:01:22,239 --> 01:01:22,850
Yes.

1050
01:01:23,560 --> 01:01:24,209
OK,

1051
01:01:25,090 --> 01:01:25,500
uh maybe

1052
01:01:25,760 --> 01:01:27,060
I have a doubt here.

1053
01:01:28,070 --> 01:01:31,659
So here. What will be the value of the that updated?

1054
01:01:31,669 --> 01:01:34,199
So which means that the set superheroes

1055
01:01:35,429 --> 01:01:36,229
So this one,

1056
01:01:36,370 --> 01:01:39,840
it could be anything, right? This could be any random area. So I suppose if you put in,

1057
01:01:40,020 --> 01:01:41,320
uh, Iron Man Black widow

1058
01:01:41,550 --> 01:01:41,729
sold

1059
01:01:41,830 --> 01:01:43,739
after this operation, right?

1060
01:01:44,250 --> 01:01:45,120
It is dynamic.

1061
01:01:45,129 --> 01:01:49,649
So that when when whenever we click the shuffle every time it keeps changing right,

1062
01:01:49,689 --> 01:01:50,159
it's not

1063
01:01:51,090 --> 01:01:53,959
Yes, it's because we are, you know, using it as a state right now.

1064
01:01:53,969 --> 01:01:56,080
Not not as a fixed data anymore,

1065
01:01:56,439 --> 01:01:59,219
right? So you are using this fixed data just to initialise this super

1066
01:01:59,679 --> 01:01:59,689
A

1067
01:02:00,010 --> 01:02:02,389
After that, everything is dependent on this function.

1068
01:02:02,780 --> 01:02:03,270
OK,

1069
01:02:03,489 --> 01:02:06,320
so that will. What will the state this function will determine about?

1070
01:02:06,699 --> 01:02:07,659
Does that make sense?

1071
01:02:08,169 --> 01:02:11,790
Yeah, because, I mean, yesterday you have showed an example of,

1072
01:02:12,040 --> 01:02:14,939
uh uh, that fixed state and it didn't change that hook

1073
01:02:16,719 --> 01:02:21,159
and the particular value didn't change. And it again, uh, went back. Right.

1074
01:02:21,449 --> 01:02:23,750
So for that, I'm asking this this value,

1075
01:02:23,760 --> 01:02:26,100
this particular value will be now become dynamic.

1076
01:02:26,110 --> 01:02:28,260
And when we start using multiple values

1077
01:02:29,909 --> 01:02:31,929
No, no, no. Don't get confused with that thing.

1078
01:02:32,199 --> 01:02:35,729
So yesterday was the example last time which I The example which I gave you

1079
01:02:35,879 --> 01:02:40,050
was something. Uh, let me put this out only. OK, let me not put it in

1080
01:02:40,800 --> 01:02:41,389
at all.

1081
01:02:42,159 --> 01:02:42,689
Maybe,

1082
01:02:42,949 --> 01:02:44,669
but I would just say initial data,

1083
01:02:46,750 --> 01:02:49,080
right. And I will initialise it with initial data.

1084
01:02:50,939 --> 01:02:52,750
So what is happening here is

1085
01:02:53,379 --> 01:02:57,320
in the last example what I gave you right yesterday or day before yesterday,

1086
01:02:57,330 --> 01:02:58,379
whenever we had session.

1087
01:02:58,620 --> 01:03:02,659
That example said that whenever you're calling a set state somewhere, right?

1088
01:03:02,669 --> 01:03:03,989
In any function or something,

1089
01:03:04,110 --> 01:03:05,870
this whole app function runs again.

1090
01:03:06,500 --> 01:03:06,870
Yeah,

1091
01:03:07,179 --> 01:03:09,669
but the value of superheroes does not,

1092
01:03:09,850 --> 01:03:13,610
uh, like remains the same, which was set using the set state.

1093
01:03:14,280 --> 01:03:14,750
OK,

1094
01:03:14,899 --> 01:03:20,139
so once the set state, uh, you know, set, like, created a new OK, let me create a

1095
01:03:20,500 --> 01:03:21,669
If we console, log

1096
01:03:22,090 --> 01:03:24,080
this area as well, right? It will

1097
01:03:24,310 --> 01:03:26,010
make sense a a copy.

1098
01:03:26,479 --> 01:03:29,949
So every time I am, uh, you know, creating let me refresh it.

1099
01:03:30,300 --> 01:03:33,199
So every time I click this button right, it will give me

1100
01:03:33,360 --> 01:03:35,610
three different elements, right?

1101
01:03:35,919 --> 01:03:37,969
Three different, uh, objects.

1102
01:03:38,139 --> 01:03:40,360
Whenever I click shuffle it will. It will create

1103
01:03:40,610 --> 01:03:42,120
three new objects, right?

1104
01:03:42,790 --> 01:03:44,989
Uh uh. From from the original one,

1105
01:03:45,219 --> 01:03:46,219
it will start,

1106
01:03:46,330 --> 01:03:48,219
you know, shuffling those accordingly.

1107
01:03:48,389 --> 01:03:48,870
Right?

1108
01:03:49,169 --> 01:03:50,889
So if it if it does,

1109
01:03:51,050 --> 01:03:53,489
actually let me see if it does or not.

1110
01:03:54,739 --> 01:03:56,370
Right? So once I'm creating that

1111
01:03:56,840 --> 01:03:59,409
right now Winter soldier and black widow,

1112
01:04:00,260 --> 01:04:02,239
Right? And then iron man. Right.

1113
01:04:02,469 --> 01:04:06,350
So it it updated the R a So it was first Winter Soldier, Iron Man Black widow.

1114
01:04:06,360 --> 01:04:08,260
But now it changed to winter soldier Blackwood,

1115
01:04:08,389 --> 01:04:10,379
so it just shuffled it somehow.

1116
01:04:10,530 --> 01:04:13,310
So the shuffle works the best when you are having,

1117
01:04:13,550 --> 01:04:17,399
uh, a lot of elements in it. So this this way of shuffling is very naive, actually.

1118
01:04:17,580 --> 01:04:19,639
And this logic is not very perfect to shuffle.

1119
01:04:20,100 --> 01:04:21,669
Um, this would be kind of biassed

1120
01:04:21,790 --> 01:04:23,649
not a true shuffle, but OK,

1121
01:04:23,659 --> 01:04:27,110
if you have a lot of elements the the the thing which we are aiming at here is to

1122
01:04:27,120 --> 01:04:29,159
shuffle the elements and then put the put that

1123
01:04:29,169 --> 01:04:32,040
shuffle la back into the state which was there,

1124
01:04:32,110 --> 01:04:32,580
right?

1125
01:04:32,590 --> 01:04:35,330
So whenever the fun like this set set function is called,

1126
01:04:35,620 --> 01:04:36,709
the whole app function will learn.

1127
01:04:36,719 --> 01:04:41,129
But the superheroes, uh, will stay the same, which which we try to set in from here.

1128
01:04:41,280 --> 01:04:41,800
Ok,

1129
01:04:41,919 --> 01:04:42,679
ok, that makes sense.

1130
01:04:43,179 --> 01:04:46,010
So that was something different than what you were doing yesterday

1131
01:04:47,090 --> 01:04:50,399
that that that example remains the same.

1132
01:04:50,659 --> 01:04:51,169
Ok,

1133
01:04:51,729 --> 01:04:52,280
ok,

1134
01:04:52,929 --> 01:04:54,500
does that make sense now or not?

1135
01:04:54,510 --> 01:04:57,459
So So don't worry about what this function actually does,

1136
01:04:57,469 --> 01:04:59,080
and the the the only thing which it does

1137
01:04:59,360 --> 01:05:00,389
is the state

1138
01:05:00,560 --> 01:05:01,149
and then

1139
01:05:01,889 --> 01:05:02,739
put it in there,

1140
01:05:03,090 --> 01:05:03,500
OK,

1141
01:05:03,510 --> 01:05:05,340
so because I mean you said this is not the

1142
01:05:05,350 --> 01:05:08,919
perfect way of the sorting out and the shuffling thing,

1143
01:05:09,040 --> 01:05:10,219
but you have used that method?

1144
01:05:10,370 --> 01:05:11,820
No, that 0.5.

1145
01:05:12,389 --> 01:05:17,520
So what other things can be used? Or you said that is not a perfect thing.

1146
01:05:17,590 --> 01:05:18,199
I mean, this is,

1147
01:05:18,389 --> 01:05:20,899
uh So there, there's a I'll tell after the decision.

1148
01:05:20,909 --> 01:05:22,929
If you stay, there's a whole debate about that.

1149
01:05:23,100 --> 01:05:25,060
Can, uh uh, like,

1150
01:05:25,229 --> 01:05:28,899
uh, computer systems truly generate random numbers or not?

1151
01:05:29,179 --> 01:05:29,610
Right.

1152
01:05:29,620 --> 01:05:32,229
So there's always a bias introducing randomness,

1153
01:05:32,239 --> 01:05:33,530
which is there in the computer system.

1154
01:05:33,739 --> 01:05:38,239
So So there are other, more complex ways of creating shuffle, shuffling, Right.

1155
01:05:38,389 --> 01:05:40,300
But this is one small way of doing it.

1156
01:05:40,449 --> 01:05:42,889
Uh, although this will work very not,

1157
01:05:42,899 --> 01:05:46,250
not not very well when there are a very small number of elements in there.

1158
01:05:46,260 --> 01:05:49,820
So if you if I increase the number of elements So as I increase the number of elements,

1159
01:05:49,830 --> 01:05:52,209
there will be more like things to select from right,

1160
01:05:52,649 --> 01:05:53,139
so

1161
01:05:53,580 --> 01:05:55,379
it will create more permutation combinations

1162
01:05:55,510 --> 01:05:55,540
that

1163
01:05:56,939 --> 01:05:58,560
that is a simple example. I

1164
01:05:58,669 --> 01:05:58,699
can

1165
01:05:58,820 --> 01:05:58,969
give you

1166
01:05:59,399 --> 01:05:59,989
so right now.

1167
01:06:00,000 --> 01:06:02,610
That's why sometimes if I'm shuffling right, so it's not, you know,

1168
01:06:02,620 --> 01:06:04,199
shuffling it Exactly,

1169
01:06:04,270 --> 01:06:07,600
because the shuffle value becomes the same as the original value.

1170
01:06:07,610 --> 01:06:08,169
Sometimes

1171
01:06:09,219 --> 01:06:09,270
number

1172
01:06:09,399 --> 01:06:09,419
of

1173
01:06:09,879 --> 01:06:10,570
combinations available.

1174
01:06:11,489 --> 01:06:11,570
OK,

1175
01:06:12,149 --> 01:06:12,979
that was the thing.

1176
01:06:13,209 --> 01:06:17,590
OK, one more question. Is it based on that number that 0.5 or,

1177
01:06:17,929 --> 01:06:18,679
uh,

1178
01:06:19,449 --> 01:06:22,020
what is the indication for that?

1179
01:06:22,760 --> 01:06:23,850
Uh,

1180
01:06:24,979 --> 01:06:28,100
random will give you something. So this is some other debate, right?

1181
01:06:28,110 --> 01:06:30,370
I I'll I'll get back to it. When? When the decision. Right.

1182
01:06:30,379 --> 01:06:31,939
We can discuss on this even more.

1183
01:06:32,300 --> 01:06:34,120
So this does not change the fact that the

1184
01:06:35,679 --> 01:06:35,899
OK,

1185
01:06:36,060 --> 01:06:37,870
how effective it? No, no, I'm very curious. Why?

1186
01:06:37,879 --> 01:06:41,219
That particular number can't be put one or one point by something like that.

1187
01:06:41,229 --> 01:06:41,649
That's why.

1188
01:06:41,949 --> 01:06:44,550
Yeah, you can use it. But again, because matter

1189
01:06:44,770 --> 01:06:45,790
random gives you,

1190
01:06:46,000 --> 01:06:48,959
uh, a number between zero and one, right.

1191
01:06:49,129 --> 01:06:52,629
And in this sort, you should either return a positive value or a negative value.

1192
01:06:52,850 --> 01:06:56,510
Right? So if you have a number less than 0.5 it will return a negative value.

1193
01:06:56,600 --> 01:06:59,560
If you have more than 0.5 right, it will return a positive value,

1194
01:06:59,570 --> 01:07:02,199
so that will determine where the element goes or not.

1195
01:07:02,590 --> 01:07:06,580
Right? So that that is something why we are using 0.5 because it's in the middle of it,

1196
01:07:06,739 --> 01:07:07,149
right?

1197
01:07:07,629 --> 01:07:11,500
Give us more like the best results which we can get if you put a 0.1

1198
01:07:11,760 --> 01:07:12,139
right?

1199
01:07:12,379 --> 01:07:13,570
Actually biassed towards one side.

1200
01:07:13,580 --> 01:07:17,510
If you put 0.9 it will be biassed to the to the other side or something like that.

1201
01:07:17,659 --> 01:07:18,260
OK,

1202
01:07:18,520 --> 01:07:18,919
that is

1203
01:07:19,570 --> 01:07:22,840
they have to try it with a lot of a lot more combination and then I

1204
01:07:22,850 --> 01:07:25,770
have to get This is the best you can get actually with with matter if it

1205
01:07:25,959 --> 01:07:26,300
matter,

1206
01:07:27,000 --> 01:07:29,100
because it gives you like it's like a bell

1207
01:07:29,110 --> 01:07:30,969
coverage in the centre or something like that.

1208
01:07:30,979 --> 01:07:34,020
So I will not get into the detail of the math behind it,

1209
01:07:34,169 --> 01:07:36,189
but yeah, it is just shuffling the element.

1210
01:07:36,580 --> 01:07:37,050
OK,

1211
01:07:37,300 --> 01:07:38,090
Ok, thanks.

1212
01:07:38,620 --> 01:07:39,070
OK,

1213
01:07:39,379 --> 01:07:40,080
so,

1214
01:07:40,330 --> 01:07:41,129
Index,

1215
01:07:41,790 --> 01:07:43,100
though for now it would

1216
01:07:43,260 --> 01:07:45,409
be coming back to the discussion that you are having,

1217
01:07:45,590 --> 01:07:46,189
right?

1218
01:07:46,199 --> 01:07:49,760
Um, that just went to another interesting concept altogether of randomness and,

1219
01:07:50,179 --> 01:07:52,469
uh, and information theory and all that. Right,

1220
01:07:52,750 --> 01:07:56,110
But coming back to this list, right? So in the key.

1221
01:07:56,120 --> 01:07:58,379
Now, we are not getting the error anymore,

1222
01:07:58,600 --> 01:08:00,899
but still, the bug is remaining.

1223
01:08:01,159 --> 01:08:02,189
And the reason is

1224
01:08:02,949 --> 01:08:04,600
the reason is index is unique.

1225
01:08:05,010 --> 01:08:05,719
Uh,

1226
01:08:06,060 --> 01:08:06,510
but

1227
01:08:06,639 --> 01:08:07,179
like,

1228
01:08:07,370 --> 01:08:08,020
uh,

1229
01:08:08,310 --> 01:08:09,810
but the key as index right,

1230
01:08:10,000 --> 01:08:11,179
So what happens is

1231
01:08:12,540 --> 01:08:13,570
by default,

1232
01:08:13,989 --> 01:08:15,310
right index

1233
01:08:15,429 --> 01:08:19,540
is the key, which is set right to the to each of the elements so

1234
01:08:19,759 --> 01:08:22,790
react. What it does is if you do not specify this index prop,

1235
01:08:22,950 --> 01:08:26,839
uh, key prop. What it will do is it will set to identify the elements.

1236
01:08:26,939 --> 01:08:28,560
It will use their index only

1237
01:08:28,850 --> 01:08:29,399
OK,

1238
01:08:29,629 --> 01:08:30,890
but what happens is

1239
01:08:31,029 --> 01:08:32,759
when you shuffle that right,

1240
01:08:32,879 --> 01:08:34,250
so the index also changes.

1241
01:08:34,529 --> 01:08:35,549
Does that make sense?

1242
01:08:35,660 --> 01:08:39,620
So if you are shuffling the R A and you're changing the original array also,

1243
01:08:39,689 --> 01:08:42,609
so the index of that particular element is also changing.

1244
01:08:42,620 --> 01:08:44,379
Does that make sense now?

1245
01:08:44,740 --> 01:08:48,399
So So suppose uh, Winter soldier was an index zero right

1246
01:08:48,540 --> 01:08:52,750
now when we shuffled the index, Winter Soldier is on now Index something else,

1247
01:08:52,910 --> 01:08:53,439
but

1248
01:08:53,790 --> 01:08:55,680
the act saw that. OK, you check

1249
01:08:55,819 --> 01:08:57,169
the index zero only.

1250
01:08:57,279 --> 01:09:01,560
OK, so it's still checking the index zero always. Right. So it is checking.

1251
01:09:01,569 --> 01:09:02,970
OK, which index is checked?

1252
01:09:03,120 --> 01:09:05,669
So suppose if I check index zero

1253
01:09:05,890 --> 01:09:09,359
always index zero will be checked, right? So the act cannot figure out,

1254
01:09:09,580 --> 01:09:10,270
uh,

1255
01:09:10,430 --> 01:09:12,069
if the you know,

1256
01:09:12,529 --> 01:09:16,620
uh, because index has not changed right for that check box index is still zero,

1257
01:09:16,859 --> 01:09:17,359
right?

1258
01:09:17,379 --> 01:09:21,040
So if you use something unique which, which from which we can identify,

1259
01:09:21,060 --> 01:09:24,000
then react will match it with that unique value right,

1260
01:09:24,100 --> 01:09:27,410
which is not changing right now. Index is changing, right? Always.

1261
01:09:27,419 --> 01:09:28,379
Whenever I'm shuffling

1262
01:09:28,540 --> 01:09:31,009
the index of the R a elements is changing,

1263
01:09:31,160 --> 01:09:32,080
so react cannot,

1264
01:09:32,279 --> 01:09:35,450
you know, it gets confused and cannot figure out if if if it has to update,

1265
01:09:35,709 --> 01:09:38,580
uh, which value it has to update. So it keeps it,

1266
01:09:38,709 --> 01:09:40,240
you know that so index is unique,

1267
01:09:40,868 --> 01:09:41,278
but

1268
01:09:41,917 --> 01:09:42,979
with key index

1269
01:09:43,158 --> 01:09:46,167
key assigned to the to an element changes on every shepherd. Right.

1270
01:09:46,368 --> 01:09:51,038
So we should aim to keep keys which are unique and non changing,

1271
01:09:51,048 --> 01:09:52,318
which are constant kind of things.

1272
01:09:52,328 --> 01:09:52,849
So we so I

1273
01:09:52,957 --> 01:09:55,128
can make a direct equality comparison

1274
01:09:55,349 --> 01:09:58,539
to see if the key has changed or not, right?

1275
01:09:58,548 --> 01:10:02,539
Or to see if the element has moved or not right in the dome or not something like that,

1276
01:10:02,859 --> 01:10:06,649
right? This is why the first element was checked. Always, even if we try to shuffle.

1277
01:10:06,660 --> 01:10:10,089
So if I try to remove the confusion What? What? What? What? What's happening here is,

1278
01:10:10,379 --> 01:10:12,129
uh, let me

1279
01:10:12,859 --> 01:10:13,990
somehow

1280
01:10:14,859 --> 01:10:15,870
if I can

1281
01:10:17,950 --> 01:10:18,959
Hm?

1282
01:10:19,660 --> 01:10:21,990
Can I pass in the index in here as Well,

1283
01:10:22,790 --> 01:10:24,160
uh, ID X

1284
01:10:26,549 --> 01:10:29,839
AD X equal to index. Something like that. Right.

1285
01:10:35,410 --> 01:10:36,240
Uh,

1286
01:10:36,419 --> 01:10:38,149
Christian, what are you trying to get at?

1287
01:10:38,870 --> 01:10:41,259
Let me let me try an example. So what I'm doing here is,

1288
01:10:41,740 --> 01:10:46,100
uh, Now I'll also take in the index as a prop and see if that

1289
01:10:46,359 --> 01:10:47,609
thing changes or not.

1290
01:10:47,870 --> 01:10:48,430
OK,

1291
01:10:48,870 --> 01:10:50,720
so Index along with it.

1292
01:10:50,910 --> 01:10:52,540
OK, just show the index along with it.

1293
01:10:59,160 --> 01:10:59,709
Let me

1294
01:10:59,810 --> 01:11:01,299
it and see if it

1295
01:11:01,479 --> 01:11:02,209
comes up.

1296
01:11:03,859 --> 01:11:04,870
Hm?

1297
01:11:05,339 --> 01:11:07,740
Why can I not see the index here?

1298
01:11:14,729 --> 01:11:15,649
I don't know what

1299
01:11:16,770 --> 01:11:18,140
the problem is.

1300
01:11:19,589 --> 01:11:21,549
Is that OK? Oh, it is IBX

1301
01:11:23,350 --> 01:11:24,359
AD X.

1302
01:11:27,049 --> 01:11:27,839
I DS

1303
01:11:35,410 --> 01:11:36,750
OK. Now let's see if

1304
01:11:37,259 --> 01:11:38,649
explanation checks out,

1305
01:11:39,069 --> 01:11:39,609
OK?

1306
01:11:39,899 --> 01:11:43,160
And let me put put something, uh,

1307
01:11:44,569 --> 01:11:44,819
put

1308
01:11:44,930 --> 01:11:45,520
it like that.

1309
01:11:45,839 --> 01:11:48,189
OK, so for now, I have 01 and two. If I

1310
01:11:48,560 --> 01:11:49,779
put in the

1311
01:11:50,359 --> 01:11:51,899
can. You see, the index is not changing.

1312
01:11:52,540 --> 01:11:55,250
So the index, which I am trying to put in there, right,

1313
01:11:55,500 --> 01:11:59,240
So the index of the list element is not changing when I'm, you know,

1314
01:11:59,250 --> 01:12:00,359
updating that thing

1315
01:12:00,580 --> 01:12:03,040
right? Hence it's always check that same index.

1316
01:12:03,240 --> 01:12:03,720
Right?

1317
01:12:04,160 --> 01:12:08,180
But if I try to pass in the key, as you know,

1318
01:12:08,910 --> 01:12:09,549
um,

1319
01:12:09,660 --> 01:12:11,069
superhero dot ID

1320
01:12:12,009 --> 01:12:12,540
right?

1321
01:12:13,439 --> 01:12:14,049
Then

1322
01:12:14,169 --> 01:12:17,250
what will happen is then what will happen is if I refresh this page

1323
01:12:18,080 --> 01:12:19,140
if I check this

1324
01:12:19,589 --> 01:12:21,509
and now what I can see is

1325
01:12:21,919 --> 01:12:26,430
it is moving like the index is still not changing. But now reactor is checking with

1326
01:12:26,770 --> 01:12:27,339
the

1327
01:12:27,439 --> 01:12:31,020
index. Uh, like with the key prop, actually. Right. So it's not,

1328
01:12:31,220 --> 01:12:36,979
uh, using the key prop as index anymore, right? Does that make sense? Does that make

1329
01:12:37,209 --> 01:12:38,970
the scenario even clear or not,

1330
01:12:39,240 --> 01:12:40,689
or does it still confuse you?

1331
01:12:42,379 --> 01:12:44,870
So what's happening here is the index basically

1332
01:12:45,770 --> 01:12:48,680
does not make any sense to use as a unique key.

1333
01:12:48,879 --> 01:12:50,589
OK, because it's changing always

1334
01:12:50,810 --> 01:12:53,560
right. So it's not unique anymore to a particular element.

1335
01:12:54,310 --> 01:12:54,799
OK,

1336
01:12:55,990 --> 01:13:01,509
so hence we should try to use a unique key which is a non changing one.

1337
01:13:01,919 --> 01:13:02,430
OK,

1338
01:13:02,649 --> 01:13:05,529
so that I can pick up the changes and move along with it.

1339
01:13:06,149 --> 01:13:06,600
OK,

1340
01:13:07,729 --> 01:13:12,600
so we should avoid using avoid index as key in other scenarios as well. 100%? Yes.

1341
01:13:12,609 --> 01:13:15,589
You should always avoid index, uh, to be used as a key.

1342
01:13:15,700 --> 01:13:19,259
It will give you a lot of unwanted errors which you would not expect.

1343
01:13:20,000 --> 01:13:22,229
Uh, since the check is set

1344
01:13:23,740 --> 01:13:27,399
to use state does react bind both ID and state when it was state

1345
01:13:27,509 --> 01:13:29,870
so react basically, uh, would, you know,

1346
01:13:31,350 --> 01:13:33,660
see if the component has moved or not, Right

1347
01:13:33,890 --> 01:13:37,419
So it it's it's binding kind of. I would say this like it's hooking

1348
01:13:37,640 --> 01:13:38,620
the state

1349
01:13:38,970 --> 01:13:41,290
to the key prop, which is there,

1350
01:13:41,520 --> 01:13:41,979
right?

1351
01:13:42,209 --> 01:13:43,649
So to identify which,

1352
01:13:44,020 --> 01:13:48,729
uh, state uh, which element should I, you know, go into and change the value of

1353
01:13:49,109 --> 01:13:49,879
Does that make sense?

1354
01:13:50,729 --> 01:13:53,740
So you can you can you can imagine it as, like, reactors hooking.

1355
01:13:55,149 --> 01:13:56,600
They stay with the key.

1356
01:13:57,279 --> 01:13:58,049
Which is there.

1357
01:13:58,390 --> 01:13:58,939
OK,

1358
01:14:00,220 --> 01:14:01,689
does that make sense to everyone or not?

1359
01:14:04,950 --> 01:14:09,220
Index is set for every element. Yes, every element will have an index for sure.

1360
01:14:09,390 --> 01:14:09,930
Right

1361
01:14:10,299 --> 01:14:13,689
and key. Basically, what you do is key.

1362
01:14:13,939 --> 01:14:15,479
Uh, is something which you use

1363
01:14:15,589 --> 01:14:17,160
to uniquely identify

1364
01:14:18,370 --> 01:14:19,430
each of the

1365
01:14:19,549 --> 01:14:20,779
dom elements.

1366
01:14:20,790 --> 01:14:21,270
OK,

1367
01:14:21,299 --> 01:14:23,620
so this is something which you can use to directly pick up

1368
01:14:23,629 --> 01:14:25,680
the dorm element like I can use to pick up that or,

1369
01:14:25,689 --> 01:14:26,080
you know,

1370
01:14:26,319 --> 01:14:28,589
um, keep track of that dorm element.

1371
01:14:28,700 --> 01:14:31,319
If it If if if some suppose, for example, right.

1372
01:14:31,330 --> 01:14:34,990
If if If I take an example, if three people live in three different houses, right?

1373
01:14:35,250 --> 01:14:37,049
And if I ask them, you know,

1374
01:14:37,060 --> 01:14:39,180
or or or three people are standing in three different boxes.

1375
01:14:39,399 --> 01:14:40,640
And if I asked them

1376
01:14:40,839 --> 01:14:45,279
to you know, uh, shuffle this, uh, shuffle their value in the boxes, right?

1377
01:14:45,500 --> 01:14:48,890
And if they take the boxes along with them, like, I cannot

1378
01:14:49,069 --> 01:14:51,319
make any change like, make make any difference, right?

1379
01:14:51,490 --> 01:14:53,000
So it's all the same to me

1380
01:14:53,430 --> 01:14:54,790
for for like, if I am the

1381
01:14:55,220 --> 01:14:57,399
if I'm having three different boxes in there,

1382
01:14:57,669 --> 01:14:58,180
right,

1383
01:14:58,779 --> 01:15:01,740
it will all look the same to me, right? So the order does not

1384
01:15:02,000 --> 01:15:04,299
order Order. I cannot maintain the

1385
01:15:04,540 --> 01:15:05,310
order in there.

1386
01:15:05,319 --> 01:15:09,700
So that is 11 problem, which is the which should exist with keys and I DS and all that,

1387
01:15:09,709 --> 01:15:10,069
right?

1388
01:15:10,759 --> 01:15:15,419
So to simplify the concept for you all not to confuse you all at all,

1389
01:15:15,640 --> 01:15:17,020
I'll try to recap it,

1390
01:15:17,299 --> 01:15:18,819
keep keep an eye on the screen.

1391
01:15:19,430 --> 01:15:21,890
One thing which react did was

1392
01:15:22,390 --> 01:15:24,069
once we started using map,

1393
01:15:24,240 --> 01:15:28,589
it wanted to have something to uniquely identify every element

1394
01:15:28,689 --> 01:15:30,470
which is returned to the map.

1395
01:15:30,649 --> 01:15:31,640
OK, one

1396
01:15:32,080 --> 01:15:32,870
second.

1397
01:15:33,490 --> 01:15:37,080
We cannot use something which is changing altogether, right,

1398
01:15:37,089 --> 01:15:40,839
which is changing constantly to uniquely identify a particular thing.

1399
01:15:40,850 --> 01:15:41,240
Right

1400
01:15:41,540 --> 01:15:45,399
Index is some one thing, which is you constantly changing.

1401
01:15:45,479 --> 01:15:47,609
Hence we cannot use it to identify

1402
01:15:47,930 --> 01:15:49,660
the change. Right

1403
01:15:50,180 --> 01:15:54,950
key is like like there is like, this is the point where key comes in,

1404
01:15:55,109 --> 01:15:55,649
right?

1405
01:15:56,100 --> 01:15:59,529
And the key should be something which is non changing and unique

1406
01:15:59,680 --> 01:16:01,680
for each of the elements. Right?

1407
01:16:01,810 --> 01:16:04,109
So that we can like a react,

1408
01:16:04,120 --> 01:16:06,390
can pick up the change and update the dom

1409
01:16:06,399 --> 01:16:08,779
accordingly and does not give you unintended bugs.

1410
01:16:09,390 --> 01:16:11,450
Do these four points make sense to everyone?

1411
01:16:14,250 --> 01:16:14,939
Yes or no?

1412
01:16:19,069 --> 01:16:21,200
So this is a very this would become very common,

1413
01:16:21,479 --> 01:16:22,529
um, interview question.

1414
01:16:22,540 --> 01:16:25,879
Also, if your interviewer wants to drill you after 1.5 hours or something, right,

1415
01:16:26,049 --> 01:16:28,990
So it goes if you want. If you if they want to go in deep

1416
01:16:29,120 --> 01:16:31,970
right into JavaScript or into react knowledge,

1417
01:16:31,990 --> 01:16:34,560
then they might ask you this question and you might

1418
01:16:34,709 --> 01:16:38,140
get, you know, take on that. So, in that scenario, you would say that

1419
01:16:38,310 --> 01:16:40,129
uh, key is used

1420
01:16:40,299 --> 01:16:44,060
to uniquely identify the dom elements by react

1421
01:16:44,270 --> 01:16:44,750
OK,

1422
01:16:44,930 --> 01:16:47,339
And we cannot use anything in the key

1423
01:16:47,459 --> 01:16:49,109
right, which, uh,

1424
01:16:49,700 --> 01:16:50,640
is changing

1425
01:16:50,850 --> 01:16:51,990
or it is not unique.

1426
01:16:52,689 --> 01:16:53,259
OK,

1427
01:16:53,500 --> 01:16:54,000
so

1428
01:16:54,180 --> 01:16:56,830
all key should be unique and so and something

1429
01:16:56,930 --> 01:16:59,209
and a value, which is non changing. So so sorry, I can

1430
01:16:59,370 --> 01:17:04,040
I about it. Ok, I, I try to put that in the side as well. I'll put it in the notes

1431
01:17:04,299 --> 01:17:04,899
so that,

1432
01:17:06,470 --> 01:17:07,310
like me,

1433
01:17:08,049 --> 01:17:08,589
put down

1434
01:17:09,620 --> 01:17:10,750
comment for this.

1435
01:17:17,129 --> 01:17:17,959
He

1436
01:17:18,140 --> 01:17:20,379
should be unique

1437
01:17:21,160 --> 01:17:24,689
and should be non changing.

1438
01:17:26,140 --> 01:17:28,509
React uses keys

1439
01:17:29,229 --> 01:17:30,779
to identify

1440
01:17:31,640 --> 01:17:33,290
the elements

1441
01:17:35,009 --> 01:17:37,660
returned from the map

1442
01:17:39,919 --> 01:17:40,569
two

1443
01:17:41,439 --> 01:17:42,410
update

1444
01:17:43,419 --> 01:17:44,180
the

1445
01:17:44,379 --> 01:17:45,160
sea.

1446
01:17:46,399 --> 01:17:46,970
Oh,

1447
01:17:48,029 --> 01:17:48,100
you

1448
01:17:48,660 --> 01:17:49,620
keep

1449
01:17:49,990 --> 01:17:52,069
track of them

1450
01:17:52,839 --> 01:17:53,490
during

1451
01:17:53,600 --> 01:17:54,299
three

1452
01:17:54,750 --> 01:17:55,569
renders.

1453
01:17:55,879 --> 01:17:58,290
Ok, so added this here in the notes. Right.

1454
01:17:58,299 --> 01:18:00,129
So you can when you when you're going through the slides,

1455
01:18:00,370 --> 01:18:01,850
you can have a look at it as well.

1456
01:18:02,299 --> 01:18:03,370
Ok, cool.

1457
01:18:10,490 --> 01:18:10,979
OK,

1458
01:18:13,750 --> 01:18:16,629
so the takeaways from here? Uh,

1459
01:18:17,540 --> 01:18:19,770
yeah, and and definitely they would have explained it. So

1460
01:18:19,970 --> 01:18:21,689
the reason, um I mean

1461
01:18:22,149 --> 01:18:25,979
the stress about about it so much is the same. Right? So

1462
01:18:26,200 --> 01:18:28,120
you want to react to understand what you are

1463
01:18:28,129 --> 01:18:30,180
trying to change and not just change randomly.

1464
01:18:30,520 --> 01:18:34,819
Right? So the takeaways here is a list and react is an area of J six elements,

1465
01:18:35,169 --> 01:18:36,790
right? Something like this

1466
01:18:37,939 --> 01:18:38,089
added

1467
01:18:38,189 --> 01:18:38,200
a

1468
01:18:38,359 --> 01:18:40,359
map method can be used to render a list

1469
01:18:40,640 --> 01:18:41,830
in a simpler format.

1470
01:18:42,839 --> 01:18:43,509
Each

1471
01:18:43,609 --> 01:18:47,330
of the list elements are set to be set to a unique key crop

1472
01:18:47,470 --> 01:18:48,140
unique

1473
01:18:48,299 --> 01:18:51,330
amongst sibling list elements. OK, not the entire.

1474
01:18:51,339 --> 01:18:53,790
You don't need to worry about the entire term element for now.

1475
01:18:54,040 --> 01:18:54,560
OK,

1476
01:18:54,799 --> 01:18:57,350
so you you need to have unique.

1477
01:18:57,589 --> 01:18:58,290
Um,

1478
01:18:59,850 --> 01:19:01,799
actually, this works for entire dome as well.

1479
01:19:02,220 --> 01:19:02,859
We'll have to see.

1480
01:19:03,490 --> 01:19:06,689
OK, I think this works for the entire dome. I'll I'll I'll get this checked as well.

1481
01:19:07,310 --> 01:19:07,819
OK,

1482
01:19:16,200 --> 01:19:17,649
we should always have the name

1483
01:19:20,890 --> 01:19:21,689
like so

1484
01:19:21,850 --> 01:19:22,910
Ask the question that,

1485
01:19:23,350 --> 01:19:26,160
uh, like key. Should we always name the element

1486
01:19:26,419 --> 01:19:27,419
as list?

1487
01:19:27,560 --> 01:19:28,470
No, it's not.

1488
01:19:29,049 --> 01:19:30,060
It's not necessary,

1489
01:19:30,259 --> 01:19:33,189
right? So let's add multiple list elements in there

1490
01:19:33,580 --> 01:19:34,419
and let's see,

1491
01:19:35,080 --> 01:19:36,640
right if you refresh

1492
01:19:36,939 --> 01:19:37,430
right,

1493
01:19:37,799 --> 01:19:40,500
So one thing which comes in here is

1494
01:19:41,060 --> 01:19:42,490
you don't need to worry about,

1495
01:19:43,439 --> 01:19:44,520
you know, you don't need to

1496
01:19:44,750 --> 01:19:46,339
worry about basically

1497
01:19:46,919 --> 01:19:47,799
the

1498
01:19:53,709 --> 01:19:56,520
you don't need to worry about, uh the key for, you know,

1499
01:19:56,529 --> 01:19:58,040
to be unique throughout your dorm.

1500
01:19:58,149 --> 01:19:59,959
It just only needs to be unique for the,

1501
01:20:00,439 --> 01:20:01,080
uh,

1502
01:20:01,200 --> 01:20:03,069
you know, siblings of that particular thing.

1503
01:20:03,200 --> 01:20:06,689
OK, and there's no hard and fast to to name it list or something like that.

1504
01:20:06,700 --> 01:20:07,850
But the key prop is

1505
01:20:08,029 --> 01:20:09,120
something which is unique.

1506
01:20:09,270 --> 01:20:09,759
OK,

1507
01:20:09,910 --> 01:20:12,189
by default key set to the R a index

1508
01:20:12,419 --> 01:20:15,220
and the assumption here for, you know,

1509
01:20:15,229 --> 01:20:18,609
reactors that the order of elements does not change, right?

1510
01:20:18,620 --> 01:20:20,379
That's why it puts it as the index.

1511
01:20:20,790 --> 01:20:23,859
And, uh, if if, if somehow the order of index,

1512
01:20:24,049 --> 01:20:27,120
this is something which you will need Only when the order of these,

1513
01:20:27,540 --> 01:20:32,240
um siblings might change right or the order of this list elements might change.

1514
01:20:32,250 --> 01:20:33,620
In that scenario, you only need,

1515
01:20:34,399 --> 01:20:37,689
um you know that the the key becomes very critical and crucial

1516
01:20:37,859 --> 01:20:42,100
else What? What react does Is it by default Sets it to index

1517
01:20:42,379 --> 01:20:45,589
and even if you set it to index, you might not face any problems.

1518
01:20:45,859 --> 01:20:49,500
Uh, till your list is not shuffling or changing or something like that.

1519
01:20:49,649 --> 01:20:50,939
But it's always better

1520
01:20:51,270 --> 01:20:52,629
to use a unique key

1521
01:20:52,850 --> 01:20:56,490
which is always, you know, you know, not changing and fixed

1522
01:20:56,970 --> 01:20:57,419
OK.

1523
01:20:57,529 --> 01:21:00,950
Or at least unique amongst the element of the of the of the,

1524
01:21:01,290 --> 01:21:01,890
um

1525
01:21:02,680 --> 01:21:06,040
uh of the the the list elements which are there. Ok,

1526
01:21:06,330 --> 01:21:07,540
if the list element

1527
01:21:07,689 --> 01:21:10,729
can change order, use another unique key to specify each element.

1528
01:21:11,750 --> 01:21:13,120
Does that make sense to everyone?

1529
01:21:14,379 --> 01:21:18,229
Keys and lists clear to people. So there were only these takeaways.

1530
01:21:18,810 --> 01:21:21,990
If you all are good, let's proceed to side effects. Right.

1531
01:21:22,859 --> 01:21:23,959
So these are some,

1532
01:21:24,160 --> 01:21:26,689
uh, interview questions I've put in. You can go through them.

1533
01:21:27,029 --> 01:21:27,620
OK,

1534
01:21:30,209 --> 01:21:32,660
let's then get to side effects with books. Everyone ready?

1535
01:21:36,640 --> 01:21:39,589
100%. It is a good practise to have I DS and objects

1536
01:21:41,950 --> 01:21:44,720
there are also, you know, cute ways. Good ways to

1537
01:21:44,850 --> 01:21:47,089
create unique is always right.

1538
01:21:47,439 --> 01:21:48,089
Um,

1539
01:21:48,790 --> 01:21:51,950
you might search them on the internet. It it gives us some good math,

1540
01:21:52,270 --> 01:21:52,759
right?

1541
01:21:52,770 --> 01:21:54,009
But it's a very elegant, small,

1542
01:21:54,020 --> 01:21:57,000
small one liner code which could help you generate unique keys.

1543
01:21:57,009 --> 01:21:59,259
All right, that is something also that you can do.

1544
01:21:59,479 --> 01:22:01,939
But if you do not have any, um,

1545
01:22:02,049 --> 01:22:04,330
ID prop along with your object,

1546
01:22:04,540 --> 01:22:05,040
OK?

1547
01:22:06,799 --> 01:22:07,439
Goods?

1548
01:22:08,500 --> 01:22:11,629
Yeah, You ID is one thing, and and one thing is, what you can do is

1549
01:22:12,279 --> 01:22:13,040
you can create

1550
01:22:13,189 --> 01:22:15,000
a uniquely identified I DS,

1551
01:22:15,439 --> 01:22:18,640
um, in C two also right. So during when you are creating this,

1552
01:22:18,890 --> 01:22:23,120
uh, list there, also, you can write some Js expression to create

1553
01:22:23,390 --> 01:22:27,419
that, uh, unique ID as well. So that is something for advance use cases.

1554
01:22:27,430 --> 01:22:28,180
If you get to it,

1555
01:22:28,450 --> 01:22:30,870
OK, when you get to it, you'll you'll understand.

1556
01:22:32,540 --> 01:22:33,129
OK,

1557
01:22:35,990 --> 01:22:37,439
so performing side effects right

1558
01:22:37,810 --> 01:22:39,270
side effects first for one.

1559
01:22:39,279 --> 01:22:40,459
If I start with side effects,

1560
01:22:40,470 --> 01:22:43,359
right will be dealt with this word when you are doing functional programming

1561
01:22:47,770 --> 01:22:49,140
with people who are new

1562
01:22:49,470 --> 01:22:51,549
side effects are operations which can

1563
01:22:51,819 --> 01:22:53,250
affect other components

1564
01:22:53,729 --> 01:22:56,950
and cannot be done during the rendering process

1565
01:22:57,109 --> 01:22:57,680
or basically,

1566
01:22:57,689 --> 01:23:00,930
side effects can be anything which are not related to rendering it down.

1567
01:23:00,959 --> 01:23:02,580
OK, a simple definition would be this

1568
01:23:03,229 --> 01:23:05,259
OK. Side effect could be anything

1569
01:23:05,370 --> 01:23:07,720
which is not related with rending the dom.

1570
01:23:07,919 --> 01:23:11,060
So, for example, fetching data from the API calls

1571
01:23:11,220 --> 01:23:12,709
or manually changing the Dom right?

1572
01:23:12,720 --> 01:23:15,069
Like the page title or something like that, if you're changing it

1573
01:23:15,390 --> 01:23:16,270
or

1574
01:23:16,779 --> 01:23:19,459
in In that scenario, what you can use is something called as a

1575
01:23:19,740 --> 01:23:20,500
use effect

1576
01:23:20,859 --> 01:23:21,959
right for side effects.

1577
01:23:22,149 --> 01:23:23,140
Does that make sense?

1578
01:23:25,439 --> 01:23:26,979
Does that make sense? What side effects are

1579
01:23:29,279 --> 01:23:29,560
OK?

1580
01:23:29,799 --> 01:23:33,350
So type two types of side effects. Two types of effects are there.

1581
01:23:33,359 --> 01:23:35,120
One is which need clean up,

1582
01:23:35,290 --> 01:23:35,819
right?

1583
01:23:35,919 --> 01:23:36,779
Like suppose, uh,

1584
01:23:36,790 --> 01:23:40,520
don't which don't need clean up like suppose API calls or manual dorm dates.

1585
01:23:40,529 --> 01:23:43,310
Or maybe if you console logging, that's also a side effect, actually.

1586
01:23:43,560 --> 01:23:45,740
Right. If you console logging some value of the state,

1587
01:23:45,930 --> 01:23:47,209
that's also a side effect,

1588
01:23:47,359 --> 01:23:48,200
which you are performing

1589
01:23:48,370 --> 01:23:52,100
right, because it is something which is not pertaining to entering the dorm,

1590
01:23:52,270 --> 01:23:54,319
right? It it's pertaining to something else. Right?

1591
01:23:54,330 --> 01:23:55,720
Console Logging is something else, right?

1592
01:23:55,970 --> 01:23:56,810
It does not,

1593
01:23:56,950 --> 01:23:57,549
um,

1594
01:23:58,080 --> 01:23:58,629
um

1595
01:23:59,529 --> 01:24:00,270
affect the dome

1596
01:24:00,430 --> 01:24:00,810
directly.

1597
01:24:01,189 --> 01:24:01,720
OK,

1598
01:24:03,299 --> 01:24:04,180
It needs

1599
01:24:04,379 --> 01:24:09,009
and other type of effects are something which needs cleanup, like clearing timers,

1600
01:24:09,020 --> 01:24:09,899
which was started.

1601
01:24:10,240 --> 01:24:14,240
Uh, do you remember any place where we did this? Some did something like this

1602
01:24:14,500 --> 01:24:17,520
where we, uh, removed the timers, Uh,

1603
01:24:17,799 --> 01:24:19,160
from the component.

1604
01:24:19,689 --> 01:24:20,990
Any place? Do you remember

1605
01:24:24,459 --> 01:24:25,500
Unmount, right?

1606
01:24:27,419 --> 01:24:29,359
How many? How many of you will remember that? Actually,

1607
01:24:30,500 --> 01:24:31,009
Component

1608
01:24:32,629 --> 01:24:33,200
Which one

1609
01:24:33,979 --> 01:24:36,500
component and mount component and mount. Right.

1610
01:24:36,509 --> 01:24:39,200
So when you are doing this stock data example, at that point of time,

1611
01:24:39,209 --> 01:24:41,250
we did a component Will and mount.

1612
01:24:41,259 --> 01:24:41,839
Um,

1613
01:24:42,040 --> 01:24:43,060
kind of,

1614
01:24:43,419 --> 01:24:44,259
uh um

1615
01:24:45,450 --> 01:24:48,680
life cycle method. And then there we used to clear up the timers. Right.

1616
01:24:48,689 --> 01:24:49,750
That was kind of a side effect,

1617
01:24:49,759 --> 01:24:53,919
which was which we we were performing using the browser API S which are there, right?

1618
01:24:53,930 --> 01:24:56,640
Like set like set, interval set, time out and all that stuff.

1619
01:24:57,000 --> 01:24:57,490
OK,

1620
01:24:57,759 --> 01:25:00,580
so let's start with side effects which do not need any cleanup. OK,

1621
01:25:01,209 --> 01:25:02,029
the effects

1622
01:25:02,189 --> 01:25:03,439
which have access

1623
01:25:03,660 --> 01:25:04,430
to

1624
01:25:04,580 --> 01:25:08,310
comp like effects, have access to competence, props and state. Right.

1625
01:25:08,669 --> 01:25:13,740
And you can write a user textbook. Let's let's start with an example. OK,

1626
01:25:14,390 --> 01:25:16,080
let's start with an example.

1627
01:25:21,270 --> 01:25:22,600
Should I start with this? Only

1628
01:25:26,399 --> 01:25:27,990
let me start with this example.

1629
01:25:29,009 --> 01:25:32,649
Uh, I can hide this up casually. You don't need it.

1630
01:25:47,549 --> 01:25:47,560
Oh,

1631
01:25:47,680 --> 01:25:51,140
what just brings in all these spaces and I don't like it at all.

1632
01:26:02,700 --> 01:26:03,250
Ok,

1633
01:26:05,359 --> 01:26:07,609
ok, let me open it in a new window

1634
01:26:08,479 --> 01:26:08,899
eight

1635
01:26:09,609 --> 01:26:13,899
and also bringing up the console

1636
01:26:15,720 --> 01:26:21,029
and, uh, also create a console dot log.

1637
01:26:22,160 --> 01:26:22,830
Um

1638
01:26:23,120 --> 01:26:24,080
Updated,

1639
01:26:24,540 --> 01:26:25,049
Ok?

1640
01:26:28,520 --> 01:26:28,910
Hm.

1641
01:26:29,629 --> 01:26:32,060
And let me also add another input. OK,

1642
01:26:32,520 --> 01:26:34,330
let me let me add another

1643
01:26:34,600 --> 01:26:35,359
input.

1644
01:26:35,770 --> 01:26:37,560
Uh, just to make it interesting.

1645
01:26:38,390 --> 01:26:38,919
Ok,

1646
01:26:42,549 --> 01:26:44,089
let's start with something and then we'll add

1647
01:26:44,220 --> 01:26:44,359
the

1648
01:26:45,259 --> 01:26:48,850
to make it much more interesting and see different use cases of it. OK,

1649
01:26:49,189 --> 01:26:52,729
so for now what I have done, I believe I understand what this example means.

1650
01:26:52,910 --> 01:26:54,370
What it example is trying to do.

1651
01:26:54,379 --> 01:26:57,970
So it has a account, a set count, a handle count function which is setting the account

1652
01:26:58,250 --> 01:27:00,759
right for whatever input which I'm having in here.

1653
01:27:01,209 --> 01:27:01,759
OK,

1654
01:27:01,870 --> 01:27:03,509
so if I try to update this,

1655
01:27:04,259 --> 01:27:06,540
you can see the updated count as being,

1656
01:27:07,149 --> 01:27:10,359
you know, the the this account is being updated. Can you see that?

1657
01:27:11,169 --> 01:27:12,080
I clear this.

1658
01:27:12,500 --> 01:27:15,580
If I update it, date on each of the

1659
01:27:15,810 --> 01:27:19,629
render which is there, right? This updated is being triggered.

1660
01:27:19,819 --> 01:27:20,629
Can you see that?

1661
01:27:21,839 --> 01:27:22,649
And also

1662
01:27:22,810 --> 01:27:22,919
our

1663
01:27:23,490 --> 01:27:26,419
like you can have a look at this title, you know, document title as well.

1664
01:27:26,779 --> 01:27:27,299
Ok,

1665
01:27:27,410 --> 01:27:29,270
so if I'm trying to update this,

1666
01:27:29,560 --> 01:27:33,009
it's also updating the document title also because

1667
01:27:33,020 --> 01:27:34,799
I am here and I'm setting document the title

1668
01:27:34,970 --> 01:27:36,890
to count and the count value, which is there,

1669
01:27:37,299 --> 01:27:40,310
and user effect always has the access to the latest,

1670
01:27:40,600 --> 01:27:42,609
uh, state value, right?

1671
01:27:42,859 --> 01:27:46,299
So similar to something like confident

1672
01:27:46,569 --> 01:27:49,250
data amount and component data update.

1673
01:27:49,359 --> 01:27:51,910
Right? So competent data update. Always had the CM,

1674
01:27:52,319 --> 01:27:55,470
um always had the latest value of the props, right?

1675
01:27:55,479 --> 01:27:58,819
Or or or already had the, you know, at least last value previous value of the props

1676
01:27:58,930 --> 01:28:00,950
here because we are using hooks.

1677
01:28:00,959 --> 01:28:03,180
We're always getting the latest value of the count prop.

1678
01:28:03,189 --> 01:28:06,970
OK, so once when I'm updating this, I'm getting the latest value of the count.

1679
01:28:07,149 --> 01:28:08,890
Meanwhile, this

1680
01:28:09,350 --> 01:28:13,899
you know, each each render which is happening is triggering this update.

1681
01:28:14,580 --> 01:28:15,790
Does that make sense to everyone?

1682
01:28:16,330 --> 01:28:17,770
To use effect is

1683
01:28:19,100 --> 01:28:22,089
the the The syntax is something like this. You like to use effect

1684
01:28:22,270 --> 01:28:23,009
directly.

1685
01:28:23,020 --> 01:28:25,390
You don't need to, you know, assign it to something else or something like that,

1686
01:28:25,709 --> 01:28:28,450
and directly you just, like, pass in a callback function

1687
01:28:28,580 --> 01:28:31,430
and perform any side effect inside this callback function if you want.

1688
01:28:31,509 --> 01:28:34,109
OK, so this can be fetching like a P data or something like that.

1689
01:28:34,120 --> 01:28:35,569
You can do all of that inside it.

1690
01:28:36,720 --> 01:28:38,790
By default, huge effect will run

1691
01:28:39,029 --> 01:28:40,720
for initial renders and all

1692
01:28:40,830 --> 01:28:42,959
renders. So basically it's a combined version

1693
01:28:43,229 --> 01:28:47,569
of competent dead mount and component data update. Does that make sense

1694
01:28:48,509 --> 01:28:49,109
or not?

1695
01:28:49,720 --> 01:28:52,879
So if I refresh this page, it will automatically be run at least two times

1696
01:28:55,209 --> 01:28:57,479
once the component for the first enter.

1697
01:28:57,490 --> 01:29:00,580
And so once I this is the component data amount

1698
01:29:00,810 --> 01:29:03,910
version of it. So it it as soon as the component is mounted,

1699
01:29:04,020 --> 01:29:04,759
it ran.

1700
01:29:05,129 --> 01:29:07,290
Once I update it, it will run again.

1701
01:29:07,700 --> 01:29:08,209
OK,

1702
01:29:08,490 --> 01:29:13,040
so every time I keep updating it, it will start, You know, uh, printing it always.

1703
01:29:13,209 --> 01:29:15,069
OK, so it's kind of a

1704
01:29:15,379 --> 01:29:18,319
combined version of component

1705
01:29:18,609 --> 01:29:19,459
data amount

1706
01:29:19,750 --> 01:29:22,660
right? And component data update. Does that make sense?

1707
01:29:23,350 --> 01:29:27,990
So it's it's it simplifies a code from two life cycle methods to a single hook.

1708
01:29:29,890 --> 01:29:30,399
OK,

1709
01:29:32,189 --> 01:29:36,160
so what you can do is you can create a new component for now, OK,

1710
01:29:36,490 --> 01:29:39,959
and call it use effect. No cleanup dot Js

1711
01:29:40,240 --> 01:29:42,359
with a given starter code. I'll give you the starter code

1712
01:29:43,220 --> 01:29:43,830
for that.

1713
01:29:45,410 --> 01:29:47,970
Let me create it also. So let me create a new,

1714
01:29:48,459 --> 01:29:50,450
uh, session five I'll create

1715
01:29:52,850 --> 01:29:54,520
you would affect

1716
01:29:55,330 --> 01:29:56,720
no clean up,

1717
01:29:57,669 --> 01:29:58,600
Gorgeous.

1718
01:29:59,759 --> 01:30:01,560
I have the starter code. I'll give it to you.

1719
01:30:11,500 --> 01:30:12,029
OK,

1720
01:30:13,129 --> 01:30:14,600
so this is a starter code.

1721
01:30:15,290 --> 01:30:16,680
Got it, And I'll give it to you.

1722
01:30:17,149 --> 01:30:20,160
Create a new file in, uh, section five,

1723
01:30:20,450 --> 01:30:25,140
right? And name it, you know, use effect. No cleanup or UV. No clean up. Whatever.

1724
01:30:25,810 --> 01:30:27,540
Right? Whatever. Whatever you

1725
01:30:27,990 --> 01:30:28,580
like.

1726
01:30:29,359 --> 01:30:29,919
OK.

1727
01:30:31,049 --> 01:30:32,339
And for a

1728
01:30:32,470 --> 01:30:36,020
dot Js, this will be your starter code. OK, I'll give you the starter code code

1729
01:30:36,290 --> 01:30:36,799
dot JSL

1730
01:30:37,009 --> 01:30:38,310
Once you're done with the,

1731
01:30:38,439 --> 01:30:40,279
uh this particular component,

1732
01:30:40,290 --> 01:30:43,470
just let me know and I'll give you the starter code for 0.0.

1733
01:30:43,479 --> 01:30:44,020
So this

1734
01:30:45,109 --> 01:30:46,759
some support for R dot DS as well?

1735
01:30:54,979 --> 01:30:55,490
Mhm

1736
01:31:11,229 --> 01:31:11,240
I

1737
01:31:40,350 --> 01:31:40,379
Yes,

1738
01:31:47,089 --> 01:31:48,240
OK, I

1739
01:31:48,720 --> 01:31:49,899
misspelt it

1740
01:31:56,109 --> 01:31:58,339
And here I have to

1741
01:31:59,790 --> 01:32:01,000
not use this.

1742
01:32:02,689 --> 01:32:03,180
OK,

1743
01:32:03,660 --> 01:32:04,740
once you are done,

1744
01:32:05,419 --> 01:32:07,310
then you can use this app dot

1745
01:32:07,750 --> 01:32:09,330
Js starter code as well.

1746
01:32:10,250 --> 01:32:10,569
Ok,

1747
01:32:10,970 --> 01:32:13,089
so use this in your app dot Js

1748
01:32:14,350 --> 01:32:18,509
and please update the value of, you know, use no effect clean up whatever

1749
01:32:31,750 --> 01:32:33,359
once they're done plus one in the chart.

1750
01:32:47,850 --> 01:32:48,790
So in the

1751
01:32:49,259 --> 01:32:52,819
US effect, no cleanup component, you'll need to do some things.

1752
01:32:52,830 --> 01:32:54,069
Once you're done, just let me know.

1753
01:32:54,080 --> 01:32:58,140
I'll give you 30 more seconds to get your starter code ready,

1754
01:33:23,609 --> 01:33:24,060
OK,

1755
01:33:25,160 --> 01:33:29,080
Two more people at least should do it so that I can move ahead of this.

1756
01:33:39,040 --> 01:33:39,529
OK,

1757
01:33:41,529 --> 01:33:45,209
so fetch the user data right and load the email

1758
01:33:45,220 --> 01:33:48,270
value by calling the update email on all renders.

1759
01:33:48,859 --> 01:33:50,029
Does that make sense?

1760
01:33:50,859 --> 01:33:55,569
So you need to fetch the user data and log the email value by calling update email

1761
01:33:55,779 --> 01:33:56,490
on

1762
01:33:56,689 --> 01:33:57,870
all renders.

1763
01:34:02,359 --> 01:34:04,689
I hope you understand how you would be able to do it.

1764
01:34:05,569 --> 01:34:07,540
It's fairly direct. I believe

1765
01:34:15,109 --> 01:34:16,080
so. This update

1766
01:34:17,890 --> 01:34:20,299
update email is already logging the data. OK,

1767
01:34:21,049 --> 01:34:25,279
it's already a logging the it's already getting the update email,

1768
01:34:25,290 --> 01:34:26,799
and it's already logging the email.

1769
01:34:27,220 --> 01:34:29,580
You just need to find a way to,

1770
01:34:29,740 --> 01:34:33,640
you know, trigger this function on all renders of this component.

1771
01:34:44,109 --> 01:34:47,240
Once you're done, just share the code which helped you achieve that.

1772
01:34:50,379 --> 01:34:51,790
One thing which I would tell you

1773
01:34:52,669 --> 01:34:55,109
is you do not need a synch and

1774
01:34:55,240 --> 01:34:57,879
a weight inside a bit.

1775
01:34:58,459 --> 01:34:59,529
Um, you know,

1776
01:35:00,250 --> 01:35:00,660
uh,

1777
01:35:02,669 --> 01:35:06,080
you don't need to make the callback function a sync right? You don't need to make

1778
01:35:06,390 --> 01:35:06,790
the US

1779
01:35:06,919 --> 01:35:08,720
effect callback function asynchronous.

1780
01:35:10,319 --> 01:35:10,810
OK,

1781
01:35:12,359 --> 01:35:14,810
there would be a few caveats for this one as well.

1782
01:35:22,810 --> 01:35:25,259
If anyone of you at least does it, I'll

1783
01:35:25,450 --> 01:35:26,500
be happy to

1784
01:35:27,490 --> 01:35:28,379
explain the solution

1785
01:35:30,089 --> 01:35:31,479
because this can be a bit tricky.

1786
01:35:39,839 --> 01:35:40,479
OK,

1787
01:35:43,819 --> 01:35:44,390
mhm

1788
01:35:45,609 --> 01:35:46,419
other people,

1789
01:35:57,009 --> 01:35:58,209
anyone else who has done it

1790
01:35:58,709 --> 01:36:01,330
or else what, error or what warning or anything.

1791
01:36:01,339 --> 01:36:02,640
If you are facing the threat, you know,

1792
01:36:07,120 --> 01:36:08,370
and try it out also

1793
01:36:34,770 --> 01:36:35,379
what

1794
01:36:36,290 --> 01:36:36,740
except

1795
01:36:36,890 --> 01:36:36,899
a

1796
01:36:38,529 --> 01:36:41,080
I am at least expecting a few more answers.

1797
01:36:42,509 --> 01:36:43,109
OK,

1798
01:36:44,830 --> 01:36:44,850
we

1799
01:36:45,140 --> 01:36:47,310
need to close this use effect also. OK,

1800
01:36:47,870 --> 01:36:51,200
so what we want to do is since the question asks us

1801
01:36:51,399 --> 01:36:54,290
to update the value on all renders

1802
01:36:54,419 --> 01:36:58,180
what is something which what is some hook which is called on all renders,

1803
01:36:58,750 --> 01:36:59,370
which is

1804
01:36:59,779 --> 01:37:00,540
us effect.

1805
01:37:00,689 --> 01:37:01,439
Yes or no?

1806
01:37:02,600 --> 01:37:04,569
This is something we just discovered discussed, right?

1807
01:37:05,569 --> 01:37:08,299
The use effect is something which will be executed on all

1808
01:37:08,439 --> 01:37:08,899
renders.

1809
01:37:09,750 --> 01:37:10,279
Right.

1810
01:37:10,520 --> 01:37:13,080
So what we can do is we can just call and use effect.

1811
01:37:13,879 --> 01:37:16,410
And inside this use effect, we can call the update image.

1812
01:37:18,770 --> 01:37:19,250
OK,

1813
01:37:19,799 --> 01:37:21,410
so once we are done with this

1814
01:37:34,310 --> 01:37:35,930
So once we are

1815
01:37:36,740 --> 01:37:38,069
done with this particular

1816
01:37:40,220 --> 01:37:41,040
scenario,

1817
01:37:41,660 --> 01:37:43,339
not sure why it's still called it.

1818
01:37:43,990 --> 01:37:49,049
But anyways, so first time, first time it was rendered, it showed us the email.

1819
01:37:49,459 --> 01:37:50,830
If I render it again

1820
01:37:51,040 --> 01:37:51,600
right,

1821
01:37:51,870 --> 01:37:55,299
it shows me the email. If I render it again, it updates the email,

1822
01:37:55,759 --> 01:38:01,029
email, email, email, email, email, email, email. So it's making

1823
01:38:01,430 --> 01:38:05,810
the, you know, call on each render, right. So every time this is rendering,

1824
01:38:06,220 --> 01:38:10,279
it is showing fetching the email in getting back, getting it back to me.

1825
01:38:10,509 --> 01:38:13,830
And the way I know it is because it will keep on making the

1826
01:38:14,169 --> 01:38:16,250
network requests like this. Can you see that?

1827
01:38:16,740 --> 01:38:20,040
So it will start making all the network requests again and again.

1828
01:38:21,189 --> 01:38:24,290
Like how many? How many network requests we have already made,

1829
01:38:24,540 --> 01:38:24,779
right.

1830
01:38:24,790 --> 01:38:30,240
If I keep making these changes, it's starting to make all these network requests.

1831
01:38:30,250 --> 01:38:31,009
Can you see that?

1832
01:38:31,770 --> 01:38:35,279
So all these network requests are made because I regard a re

1833
01:38:35,399 --> 01:38:35,759
render.

1834
01:38:36,600 --> 01:38:37,890
Does that make sense to everyone?

1835
01:38:39,279 --> 01:38:41,020
Does the solution make sense to everyone or not?

1836
01:38:41,600 --> 01:38:42,250
What happened?

1837
01:38:45,000 --> 01:38:47,009
So on. So this is something which you achieved.

1838
01:38:47,020 --> 01:38:49,649
So on every vendor we are fetching the email and getting the value

1839
01:38:49,939 --> 01:38:54,890
right. And I can see, uh, that I'm making the calls because I can do that in my

1840
01:38:55,799 --> 01:38:56,250
no

1841
01:38:58,100 --> 01:39:00,250
I. I can see that those those calls in my,

1842
01:39:00,779 --> 01:39:01,549
um,

1843
01:39:03,810 --> 01:39:04,240
network

1844
01:39:04,350 --> 01:39:08,870
tables OK, somewhere here. I made some few more calls to here. They are.

1845
01:39:09,479 --> 01:39:09,970
OK,

1846
01:39:10,720 --> 01:39:11,209
what

1847
01:39:16,009 --> 01:39:18,759
can you check that if they are being made on

1848
01:39:18,979 --> 01:39:22,399
each message Change and user ID change also,

1849
01:39:22,779 --> 01:39:24,100
Can you Can you check that?

1850
01:39:25,509 --> 01:39:27,830
Can you check that if they are being made on,

1851
01:39:28,419 --> 01:39:29,129
um

1852
01:39:29,240 --> 01:39:31,919
you know, message changes as well as user ID changes,

1853
01:39:32,740 --> 01:39:33,339
are they?

1854
01:39:34,180 --> 01:39:37,430
If I change the user? ID, will this will this function be called again?

1855
01:39:40,680 --> 01:39:41,490
Can you see that?

1856
01:39:43,790 --> 01:39:46,350
If I'm changing this user email right

1857
01:39:46,470 --> 01:39:48,200
now, I'm getting the

1858
01:39:48,660 --> 01:39:52,620
new user email for each of the user. ID does that make sense?

1859
01:39:52,819 --> 01:39:56,549
So if I'm creating, like for for 13, I don't have anything, right?

1860
01:39:56,899 --> 01:40:01,490
Uh, that would give me an error, but till 10. I till 12. I have something. Right?

1861
01:40:01,910 --> 01:40:05,040
So what I want is what What I essentially wanted

1862
01:40:05,390 --> 01:40:10,080
was to achieve something where I would update the, uh, user ID,

1863
01:40:10,350 --> 01:40:12,279
right? And I get the email of that person,

1864
01:40:13,029 --> 01:40:14,939
right? That would be a better use case, right?

1865
01:40:15,680 --> 01:40:16,350
Yes or no.

1866
01:40:17,180 --> 01:40:18,200
So but But right now,

1867
01:40:18,209 --> 01:40:19,950
what's happening here is if I even if I change the

1868
01:40:19,959 --> 01:40:23,229
message or if I change the user ID right here now,

1869
01:40:23,240 --> 01:40:26,810
right now, I'm like, fetching the unnecessary data right again and again.

1870
01:40:27,189 --> 01:40:29,270
Always. Does that make sense to you or not?

1871
01:40:30,700 --> 01:40:31,270
Everyone,

1872
01:40:31,959 --> 01:40:33,779
I hope I'm not rushing with this.

1873
01:40:34,080 --> 01:40:36,490
I'm not very fast while working with it.

1874
01:40:39,520 --> 01:40:42,810
If you feel I'm going very fast, just just ask me to slow down, OK,

1875
01:40:45,759 --> 01:40:49,910
so for now, what's happening here is I want actually to If if I click on this

1876
01:40:50,180 --> 01:40:50,750
right,

1877
01:40:50,970 --> 01:40:53,209
it should bring me the new user email.

1878
01:40:53,379 --> 01:40:53,890
But

1879
01:40:54,129 --> 01:40:56,589
this is unnecessary, right? This is a necessary email.

1880
01:40:56,600 --> 01:40:58,580
This is unnecessary request, which I'm making

1881
01:40:58,899 --> 01:41:00,870
right. I'm again and again, like calling

1882
01:41:01,049 --> 01:41:02,069
the same function

1883
01:41:02,450 --> 01:41:06,620
because it was the part of it, right? It's It's It's like trying to update

1884
01:41:06,970 --> 01:41:07,870
it always,

1885
01:41:07,979 --> 01:41:09,479
right? It should not be the case

1886
01:41:10,049 --> 01:41:10,649
at least.

1887
01:41:10,950 --> 01:41:11,490
OK,

1888
01:41:12,160 --> 01:41:15,729
Because I'm passing the user ID and the message both right.

1889
01:41:16,229 --> 01:41:17,359
I only want

1890
01:41:17,580 --> 01:41:20,259
when the user ID changes, right? It should,

1891
01:41:20,819 --> 01:41:23,569
uh, make a call when it does not change. It should not make a call.

1892
01:41:24,419 --> 01:41:27,830
How would you do it in normal class companies, Can you remember?

1893
01:41:29,330 --> 01:41:32,089
Can anyone tell me, How would you do it in normal class component?

1894
01:41:34,459 --> 01:41:35,720
How would you check

1895
01:41:36,149 --> 01:41:37,350
if, uh,

1896
01:41:37,669 --> 01:41:38,390
the

1897
01:41:39,350 --> 01:41:41,729
like when to make the call or when not to make the call? Because

1898
01:41:42,080 --> 01:41:43,669
II, I remember that in compered

1899
01:41:43,919 --> 01:41:45,669
update. We always used to,

1900
01:41:46,160 --> 01:41:46,990
uh,

1901
01:41:47,229 --> 01:41:48,390
have a check. Right?

1902
01:41:50,459 --> 01:41:51,629
So that chick,

1903
01:41:52,250 --> 01:41:54,799
can anyone tell me what that check would have been?

1904
01:41:58,890 --> 01:41:59,759
Right, Right.

1905
01:41:59,770 --> 01:42:01,310
We would check that if the user ID has

1906
01:42:01,319 --> 01:42:03,299
changed in order at least so like something like,

1907
01:42:03,470 --> 01:42:04,740
uh, if,

1908
01:42:04,879 --> 01:42:10,799
um this dot props is, uh, pro this dot props dot ID

1909
01:42:10,979 --> 01:42:15,419
is not equal to equal to props dot ID Something like that, right?

1910
01:42:15,700 --> 01:42:20,020
Or previous props dot ID then only make the call. Does that make sense

1911
01:42:21,020 --> 01:42:21,609
or not?

1912
01:42:21,899 --> 01:42:23,439
So we used to check it inside the

1913
01:42:23,770 --> 01:42:26,609
data. The data date, right? Always

1914
01:42:27,450 --> 01:42:28,680
are people with me or not.

1915
01:42:29,049 --> 01:42:29,160
So

1916
01:42:29,759 --> 01:42:29,990
Kavita

1917
01:42:30,310 --> 01:42:30,540
Dana

1918
01:42:31,089 --> 01:42:31,140
Vikash

1919
01:42:31,250 --> 01:42:31,310
my

1920
01:42:31,569 --> 01:42:31,689
Sunil.

1921
01:42:33,930 --> 01:42:33,939
Ah,

1922
01:42:35,899 --> 01:42:36,509
yes.

1923
01:42:39,490 --> 01:42:42,549
So we only need to make the API calls on the user ID change. Right?

1924
01:42:42,669 --> 01:42:44,359
So we can you know, Actually,

1925
01:42:44,370 --> 01:42:46,859
you know something like something like this we used to do right.

1926
01:42:46,870 --> 01:42:47,359
So previous

1927
01:42:47,729 --> 01:42:48,430
user ID

1928
01:42:48,540 --> 01:42:49,209
not equal to

1929
01:42:49,399 --> 01:42:49,609
this

1930
01:42:50,029 --> 01:42:53,870
Do ID then only make the like then only call this this Do update email.

1931
01:42:53,879 --> 01:42:55,299
Yes, everyone can relate to this

1932
01:42:56,049 --> 01:42:56,770
yes or no?

1933
01:42:59,529 --> 01:43:00,020
Yes,

1934
01:43:00,919 --> 01:43:01,790
if,

1935
01:43:02,129 --> 01:43:02,729
um

1936
01:43:04,689 --> 01:43:06,379
so if you want to do that same thing

1937
01:43:06,649 --> 01:43:08,370
with the hooks version, right?

1938
01:43:08,740 --> 01:43:10,500
There's something which we can pass in,

1939
01:43:11,109 --> 01:43:12,069
um

1940
01:43:12,470 --> 01:43:16,160
along with this use effect which is called as a dependency of that use effect. Right?

1941
01:43:16,609 --> 01:43:20,879
So this dependency there's an area of dependencies that you can pass right,

1942
01:43:21,240 --> 01:43:24,850
which would basically tell us effect on

1943
01:43:25,319 --> 01:43:28,279
what to listen to, right? What changes to listen to

1944
01:43:28,410 --> 01:43:30,879
and at what time you want to make the

1945
01:43:31,629 --> 01:43:32,209
call.

1946
01:43:32,399 --> 01:43:34,220
Ok, at what time you want to run this,

1947
01:43:34,649 --> 01:43:39,080
um effect. OK, so here you can pass in a dependency R. And

1948
01:43:39,319 --> 01:43:40,439
you can say that. Ok,

1949
01:43:41,109 --> 01:43:43,339
uh, props dot User

1950
01:43:43,720 --> 01:43:44,240
ID

1951
01:43:45,020 --> 01:43:46,379
OK, this is something that you are getting.

1952
01:43:46,660 --> 01:43:47,149
So

1953
01:43:47,410 --> 01:43:51,089
whenever I'm changing the user ID only at that point of time,

1954
01:43:51,339 --> 01:43:54,580
try to make a call else. Please don't make it,

1955
01:43:54,970 --> 01:43:55,450
OK,

1956
01:43:56,020 --> 01:43:58,419
so now you use the fact to listen to this brow

1957
01:43:58,640 --> 01:43:59,370
user ID.

1958
01:43:59,589 --> 01:44:01,910
And whenever this project user ID is changing

1959
01:44:02,200 --> 01:44:06,529
right only at that point of time it will make a call. Ok, so here I am making a call.

1960
01:44:06,919 --> 01:44:07,740
Can you see that

1961
01:44:08,009 --> 01:44:09,950
here? I'm making the call. I'm changing the user ID

1962
01:44:10,129 --> 01:44:11,890
But if I don't change the user ID,

1963
01:44:12,290 --> 01:44:15,609
there is no call being made. Can you see? No call is being made here.

1964
01:44:16,390 --> 01:44:17,919
Does that make sense to everyone or not?

1965
01:44:18,609 --> 01:44:20,109
So the renders are there.

1966
01:44:20,370 --> 01:44:24,060
But the call is not being made unless and until I change the

1967
01:44:25,029 --> 01:44:25,879
user ID

1968
01:44:26,279 --> 01:44:27,359
does that make sense?

1969
01:44:27,830 --> 01:44:31,819
So this is very simple version of, you know, working with, uh

1970
01:44:32,069 --> 01:44:36,100
uh, checks and dependency so we can make, uh, user effect.

1971
01:44:36,109 --> 01:44:39,569
Listen to some some of these, uh, values, right?

1972
01:44:39,850 --> 01:44:42,959
And see if those values change, then only

1973
01:44:43,310 --> 01:44:46,229
call this function else. Do not run this function.

1974
01:44:46,560 --> 01:44:47,720
Does that make sense?

1975
01:44:48,790 --> 01:44:51,290
So the this this R a is called as a dependency R A.

1976
01:44:51,299 --> 01:44:53,459
You can pass in any number of dependencies in here,

1977
01:44:53,649 --> 01:44:54,180
right?

1978
01:44:54,310 --> 01:44:56,529
So if you remove this, uh, user ID

1979
01:44:56,720 --> 01:45:00,089
and you only pass, uh, maybe

1980
01:45:00,819 --> 01:45:03,959
pros dot MS team, which is message,

1981
01:45:04,129 --> 01:45:04,700
right?

1982
01:45:04,930 --> 01:45:05,560
Then

1983
01:45:07,160 --> 01:45:08,620
it will render on message,

1984
01:45:08,759 --> 01:45:11,979
right? But it will not run on user ID change. Can you see that?

1985
01:45:12,339 --> 01:45:15,830
So if even if I am changing the user ID, it is not making any calls,

1986
01:45:15,839 --> 01:45:17,189
which is something which I don't want.

1987
01:45:17,339 --> 01:45:19,490
But still, I'm just telling you that it will now only run.

1988
01:45:22,509 --> 01:45:25,089
It will now only run when the message is changing.

1989
01:45:25,370 --> 01:45:26,370
Does that make sense?

1990
01:45:32,240 --> 01:45:34,990
Uh, why was it written inside square brackets here?

1991
01:45:35,160 --> 01:45:36,410
This is an array, right?

1992
01:45:36,729 --> 01:45:38,399
So this is an array which you are passing.

1993
01:45:38,910 --> 01:45:41,399
So so use effect. Something looks something like this.

1994
01:45:41,569 --> 01:45:42,770
So use effect,

1995
01:45:43,470 --> 01:45:43,970
right

1996
01:45:44,279 --> 01:45:46,540
and inside is the first argument is a function

1997
01:45:46,799 --> 01:45:48,810
right? Second argument is an array.

1998
01:45:49,700 --> 01:45:52,240
OK, this is how the US effect looks like.

1999
01:45:52,680 --> 01:45:54,600
So the first thing is a callback function.

2000
01:45:54,959 --> 01:45:56,129
OK, callback

2001
01:45:56,419 --> 01:45:57,220
function.

2002
01:45:57,390 --> 01:46:00,470
And the second thing is the dependency.

2003
01:46:01,229 --> 01:46:01,750
Got it.

2004
01:46:02,689 --> 01:46:03,209
OK,

2005
01:46:03,439 --> 01:46:05,100
got it. This is how it looks like.

2006
01:46:06,149 --> 01:46:07,250
Makes sense to do one.

2007
01:46:08,169 --> 01:46:10,919
Now, if you try this out, then see what what happens?

2008
01:46:10,979 --> 01:46:13,490
Can anyone tell what would happen if you try this out?

2009
01:46:14,020 --> 01:46:17,759
Go ahead and, uh, you know, add a dependency. I do not add any dependency to it.

2010
01:46:18,080 --> 01:46:20,919
See what happens then Can you Can you tell the behaviour of

2011
01:46:21,180 --> 01:46:22,330
what What it would do?

2012
01:46:26,109 --> 01:46:28,100
It will render only once something like

2013
01:46:28,430 --> 01:46:29,540
which which, uh

2014
01:46:29,970 --> 01:46:31,870
component Uh you know,

2015
01:46:32,000 --> 01:46:34,160
method would you You would relate it to

2016
01:46:35,839 --> 01:46:38,970
So it will only render once once the component is mounting.

2017
01:46:39,279 --> 01:46:39,830
Right?

2018
01:46:40,859 --> 01:46:41,470
So

2019
01:46:42,759 --> 01:46:45,419
it works exactly similar to component amount.

2020
01:46:45,779 --> 01:46:46,270
Right?

2021
01:46:46,810 --> 01:46:50,390
So if you are you know, not adding anything in here as a dependency R a

2022
01:46:51,919 --> 01:46:54,569
Then what will happen is it will only run on the

2023
01:46:55,319 --> 01:46:58,910
it will only run on mounting Ok, Once this element is mounted, it is

2024
01:46:59,399 --> 01:47:00,180
the change

2025
01:47:00,299 --> 01:47:03,629
now. No changes make any difference to it.

2026
01:47:04,209 --> 01:47:05,259
Does that make sense?

2027
01:47:06,250 --> 01:47:08,259
So this is the version of component Denmark.

2028
01:47:09,799 --> 01:47:10,359
OK,

2029
01:47:11,180 --> 01:47:12,490
does that make sense to everyone?

2030
01:47:14,229 --> 01:47:14,779
Got it.

2031
01:47:15,209 --> 01:47:15,640
So

2032
01:47:16,020 --> 01:47:19,180
So you should not directly relate to it because the concept is very different

2033
01:47:19,339 --> 01:47:20,799
of hooks and, like, cycle methods.

2034
01:47:20,810 --> 01:47:24,040
But there is something to just, you know, connect the dots together,

2035
01:47:24,270 --> 01:47:28,299
right? So that we are like, it's a new way of writing a new way of implementing things.

2036
01:47:28,479 --> 01:47:32,180
But, uh, you can still make the things which they still use the,

2037
01:47:32,399 --> 01:47:33,120
uh,

2038
01:47:35,000 --> 01:47:39,660
you know, kind of ideology, which you are trying to use in competent, uh,

2039
01:47:39,669 --> 01:47:40,720
life cycle methods.

2040
01:47:40,729 --> 01:47:42,080
Does that make sense to everyone?

2041
01:47:42,250 --> 01:47:42,959
Yes or no?

2042
01:47:44,109 --> 01:47:45,640
So it's working similar to component dead.

2043
01:47:46,120 --> 01:47:47,729
Everyone understood

2044
01:47:48,200 --> 01:47:51,009
what the dependency R is and why we need it.

2045
01:47:51,580 --> 01:47:54,729
So, dependency R a helps us. Uh, you know, make the,

2046
01:47:55,000 --> 01:47:55,700
um,

2047
01:47:55,899 --> 01:47:58,759
use effect, uh, work as competent update.

2048
01:47:58,990 --> 01:47:59,529
Right.

2049
01:47:59,669 --> 01:48:01,580
If we do not add any dependencies in the

2050
01:48:01,700 --> 01:48:05,160
dependency it is, it is working similar to component data amount.

2051
01:48:05,569 --> 01:48:06,109
Right.

2052
01:48:06,540 --> 01:48:09,229
And now what is left? What is one thing which is left

2053
01:48:09,680 --> 01:48:11,370
in the three golden,

2054
01:48:11,620 --> 01:48:12,879
uh, life cycle methods

2055
01:48:13,299 --> 01:48:15,930
so we did comprehended amount. We did comprehended update

2056
01:48:16,410 --> 01:48:18,189
and what is left now

2057
01:48:18,430 --> 01:48:19,569
One thing which is left is

2058
01:48:20,979 --> 01:48:21,729
component.

2059
01:48:22,399 --> 01:48:23,270
Will Unmount?

2060
01:48:23,520 --> 01:48:24,089
Yes.

2061
01:48:24,500 --> 01:48:26,589
So that is something which is we will

2062
01:48:26,899 --> 01:48:27,790
understand

2063
01:48:27,930 --> 01:48:28,950
when you're working with

2064
01:48:30,890 --> 01:48:31,490
OK,

2065
01:48:32,000 --> 01:48:34,330
so let me

2066
01:48:34,450 --> 01:48:36,200
bring up the example.

2067
01:48:38,149 --> 01:48:38,600
Ok,

2068
01:48:40,279 --> 01:48:41,609
let me bring up the example

2069
01:48:44,259 --> 01:48:47,850
So component will Unmount uh was used to clean

2070
01:48:47,859 --> 01:48:50,089
up resources on a component and mount right?

2071
01:48:50,359 --> 01:48:51,509
So with use effect

2072
01:48:51,839 --> 01:48:55,529
you if you return a function with some cleanup logic like

2073
01:48:56,089 --> 01:48:59,169
like something like this. Or maybe if you clear a timer or something like that right

2074
01:48:59,439 --> 01:49:00,080
then

2075
01:49:00,330 --> 01:49:04,149
it will act like component Will unmount OK

2076
01:49:04,310 --> 01:49:05,140
or it will,

2077
01:49:05,299 --> 01:49:08,009
um I should not actually say this, but

2078
01:49:08,649 --> 01:49:09,399
I mean,

2079
01:49:09,609 --> 01:49:13,299
we can for now work with this particular thing.

2080
01:49:13,529 --> 01:49:15,910
OK, let me add drop dot user ID.

2081
01:49:17,879 --> 01:49:18,379
Right,

2082
01:49:18,600 --> 01:49:20,740
So this function basically will be run

2083
01:49:21,109 --> 01:49:23,049
before the component is unmounted

2084
01:49:23,720 --> 01:49:24,770
Does that make sense

2085
01:49:24,990 --> 01:49:27,450
or before Basically this effect is un mounting.

2086
01:49:27,910 --> 01:49:28,529
I would say

2087
01:49:28,850 --> 01:49:30,109
that would be a better way to,

2088
01:49:30,660 --> 01:49:31,680
uh, state it

2089
01:49:31,950 --> 01:49:34,060
so because we can have multiple use effects as well.

2090
01:49:34,069 --> 01:49:36,890
Like we used to have multiple, uh, use states.

2091
01:49:37,109 --> 01:49:37,640
Right.

2092
01:49:38,120 --> 01:49:41,830
So in that scenario when this effect is basically un mounting right,

2093
01:49:41,839 --> 01:49:44,089
which will be the time when the component is un mounting.

2094
01:49:44,339 --> 01:49:47,930
Right. This function will be run immediately before the

2095
01:49:48,370 --> 01:49:49,529
component is and mounting.

2096
01:49:49,839 --> 01:49:50,910
Does that make sense?

2097
01:49:51,660 --> 01:49:53,450
So this is

2098
01:49:53,580 --> 01:49:54,729
executed

2099
01:49:55,830 --> 01:49:57,330
just before

2100
01:49:58,310 --> 01:49:59,919
D use effect.

2101
01:50:00,649 --> 01:50:01,939
It is un mounting

2102
01:50:04,600 --> 01:50:05,209
or

2103
01:50:07,700 --> 01:50:08,950
or technically,

2104
01:50:11,290 --> 01:50:12,009
when the

2105
01:50:12,560 --> 01:50:12,779
Popo

2106
01:50:13,580 --> 01:50:14,669
is unmarked.

2107
01:50:15,720 --> 01:50:16,209
OK,

2108
01:50:16,839 --> 01:50:19,669
so that is the only time when the use effect will be, you know, removed

2109
01:50:19,799 --> 01:50:24,109
or or the use effect listeners or whatever will be removed. At that point,

2110
01:50:24,399 --> 01:50:26,600
you would want to run this function,

2111
01:50:26,810 --> 01:50:27,330
OK?

2112
01:50:28,470 --> 01:50:29,839
Does that make sense to everyone?

2113
01:50:30,479 --> 01:50:32,720
I'll give you an example. I'll bring up an example right

2114
01:50:33,220 --> 01:50:35,430
here. You want to only make this particular change.

2115
01:50:35,750 --> 01:50:36,879
But in the app dot

2116
01:50:37,080 --> 01:50:38,370
You make a few changes

2117
01:50:44,319 --> 01:50:46,120
the app dot Js

2118
01:50:47,450 --> 01:50:49,660
Let me bring up a few changes.

2119
01:50:50,589 --> 01:50:54,069
One is I don't need to export this.

2120
01:50:54,910 --> 01:50:56,779
The other is I would

2121
01:51:04,729 --> 01:51:05,879
Hi This up.

2122
01:51:06,720 --> 01:51:07,279
Right.

2123
01:51:08,359 --> 01:51:09,810
Bring this import

2124
01:51:10,729 --> 01:51:12,640
down here where I need it,

2125
01:51:14,490 --> 01:51:15,069
ok,

2126
01:51:15,810 --> 01:51:19,779
and remove all these spaces which are very annoying.

2127
01:51:37,779 --> 01:51:39,350
Please bear with me for one second

2128
01:51:43,939 --> 01:51:44,770
hm

2129
01:51:50,000 --> 01:51:50,509
control

2130
01:51:51,490 --> 01:51:53,589
Oh, thank God. Thanks a lot. So

2131
01:51:55,299 --> 01:51:56,560
you you save the day

2132
01:51:57,270 --> 01:51:57,779
OK,

2133
01:51:57,959 --> 01:52:00,669
so control basically removes all the spaces. Thanks a lot.

2134
01:52:01,160 --> 01:52:03,240
Uh, now I'm gonna use it heavily.

2135
01:52:05,229 --> 01:52:06,279
Use effect

2136
01:52:06,540 --> 01:52:08,299
with cleanup,

2137
01:52:09,270 --> 01:52:10,120
but yes.

2138
01:52:10,859 --> 01:52:11,479
Right.

2139
01:52:11,839 --> 01:52:14,430
And here I will have

2140
01:52:15,660 --> 01:52:18,310
all these things which I had already had

2141
01:52:19,129 --> 01:52:20,080
control. Less

2142
01:52:20,500 --> 01:52:22,660
smooth, smooth as whiskey.

2143
01:52:23,359 --> 01:52:24,129
Very nice

2144
01:52:27,379 --> 01:52:28,689
control, X.

2145
01:52:29,549 --> 01:52:31,640
And I'll update control V.

2146
01:52:43,979 --> 01:52:44,430
OK,

2147
01:52:45,770 --> 01:52:49,660
I believe the example would now be ready,

2148
01:52:50,209 --> 01:52:53,140
and I'll have to just call this.

2149
01:52:53,859 --> 01:52:55,109
You will affect

2150
01:52:56,390 --> 01:52:57,569
with no cleanup.

2151
01:52:58,189 --> 01:52:58,689
Oops.

2152
01:52:59,000 --> 01:52:59,850
Use effect

2153
01:53:00,459 --> 01:53:01,240
with cleanup

2154
01:53:06,220 --> 01:53:06,500
and

2155
01:53:08,500 --> 01:53:09,299
repent.

2156
01:53:14,660 --> 01:53:15,089
Cool.

2157
01:53:15,370 --> 01:53:19,560
So now I have this example ready for me,

2158
01:53:19,839 --> 01:53:22,870
right? And in this example, you can see with clean up what I did.

2159
01:53:22,879 --> 01:53:27,549
I just have this cleanup logic written in here. Nothing is gonna actually, you know,

2160
01:53:27,879 --> 01:53:28,669
um,

2161
01:53:29,850 --> 01:53:30,950
directly working.

2162
01:53:31,200 --> 01:53:31,939
But,

2163
01:53:32,810 --> 01:53:34,959
um I mean, we are not cleaning up technically anything,

2164
01:53:34,970 --> 01:53:37,149
but we just want to see when it is done, actually.

2165
01:53:37,379 --> 01:53:37,950
OK,

2166
01:53:38,060 --> 01:53:42,629
so if I try to, you know, just update the message and update this something,

2167
01:53:43,020 --> 01:53:43,660
uh,

2168
01:53:45,390 --> 01:53:47,770
when I when I'm clicking on show component, right,

2169
01:53:47,970 --> 01:53:51,390
then it is, you know, trying to update the state, right?

2170
01:53:51,580 --> 01:53:53,700
Whatever. Whenever this function,

2171
01:53:53,830 --> 01:53:57,759
can you can you see whenever. Whenever this use effect is basically, uh

2172
01:53:57,959 --> 01:54:02,140
you know, finished at that point of time, it is running up the cleanup logic,

2173
01:54:02,149 --> 01:54:04,189
so I could, you know, rephrase this and say,

2174
01:54:04,410 --> 01:54:06,339
uh, whenever this use effect,

2175
01:54:06,939 --> 01:54:09,729
uh, function has executed,

2176
01:54:09,879 --> 01:54:10,029
this

2177
01:54:10,509 --> 01:54:11,229
is before

2178
01:54:12,379 --> 01:54:13,549
executed.

2179
01:54:14,649 --> 01:54:15,439
Um,

2180
01:54:16,720 --> 01:54:17,390
when

2181
01:54:18,640 --> 01:54:19,410
the

2182
01:54:21,419 --> 01:54:22,209
function

2183
01:54:22,950 --> 01:54:25,799
ends, or whatever, like finishes executing

2184
01:54:30,229 --> 01:54:33,629
you would only need these kind of, uh, you know, um,

2185
01:54:34,589 --> 01:54:35,290
effects

2186
01:54:35,459 --> 01:54:37,160
only when you are. You know,

2187
01:54:37,649 --> 01:54:39,359
uh, trying to,

2188
01:54:40,180 --> 01:54:41,709
uh, clean up some

2189
01:54:43,049 --> 01:54:47,290
but, uh, time or something like that. Only in that scenario, as you will be,

2190
01:54:47,910 --> 01:54:49,140
uh, working.

2191
01:54:49,279 --> 01:54:52,850
So it technically is not exactly equal to competent, Val,

2192
01:54:53,009 --> 01:54:53,459
and mount

2193
01:54:53,649 --> 01:54:54,259
the reason

2194
01:54:54,620 --> 01:54:57,919
the reason is competent Val amount runs only before

2195
01:54:58,140 --> 01:54:59,890
the competent and mounting right,

2196
01:55:00,100 --> 01:55:03,470
but use effect. Uh, because it's like a normal callback function.

2197
01:55:03,669 --> 01:55:06,410
It will always, you know, try to run this particular thing.

2198
01:55:06,589 --> 01:55:10,100
You can make it technically run like you competent data and mount. But

2199
01:55:10,549 --> 01:55:12,200
that is a villain mount.

2200
01:55:12,410 --> 01:55:15,189
But that is for some different, you know,

2201
01:55:15,330 --> 01:55:16,640
through some different logic.

2202
01:55:16,790 --> 01:55:20,629
OK, so you can have a a altogether separate use effect for it,

2203
01:55:20,930 --> 01:55:23,270
right? And then you can only return this function.

2204
01:55:23,899 --> 01:55:27,470
Does that make sense? If I summarise what I wanted to do with this particular thing

2205
01:55:27,810 --> 01:55:28,759
is

2206
01:55:29,500 --> 01:55:30,029
that

2207
01:55:31,390 --> 01:55:33,569
we have component data and mount here.

2208
01:55:33,750 --> 01:55:35,240
We have component,

2209
01:55:35,490 --> 01:55:36,819
uh, data update here,

2210
01:55:36,870 --> 01:55:40,759
but we do not have a direct equivalent of component will and mount in

2211
01:55:40,979 --> 01:55:42,060
books, OK?

2212
01:55:42,680 --> 01:55:43,459
Because

2213
01:55:43,910 --> 01:55:45,580
we can do cleanup effects,

2214
01:55:45,790 --> 01:55:46,350
but

2215
01:55:46,479 --> 01:55:48,069
these cleanup effects are run.

2216
01:55:48,399 --> 01:55:50,700
Uh, as soon as you you know, for

2217
01:55:51,020 --> 01:55:53,390
render like for whenever your function renders

2218
01:55:53,589 --> 01:55:55,470
right, because each of the time what you have,

2219
01:55:55,479 --> 01:55:59,049
what what you're doing is you are actually rerunning this whole app.

2220
01:55:59,060 --> 01:55:59,950
Does that make sense?

2221
01:56:00,470 --> 01:56:01,020
So

2222
01:56:01,220 --> 01:56:02,479
in in that scenario,

2223
01:56:02,669 --> 01:56:04,750
you cannot actually figure out when your computer is

2224
01:56:04,759 --> 01:56:06,290
un mounting and when your computer is mounting,

2225
01:56:06,299 --> 01:56:08,779
right, because on every render your whole app is running,

2226
01:56:08,790 --> 01:56:10,240
does that make sense to you or not?

2227
01:56:10,899 --> 01:56:14,810
So there's no technical concept of mounting or un mounting anymore.

2228
01:56:14,870 --> 01:56:16,080
Which is there, right?

2229
01:56:16,089 --> 01:56:19,419
That's why we we should avoid using these words like comprehended mount

2230
01:56:19,850 --> 01:56:21,020
and mount, or all that stuff,

2231
01:56:21,029 --> 01:56:24,450
because there's no concept of mounting and mounting anymore, which is left, right,

2232
01:56:24,459 --> 01:56:24,799
So

2233
01:56:25,100 --> 01:56:26,479
but But you can say that

2234
01:56:26,830 --> 01:56:30,229
we can try to mimic the effect of those life cycle methods

2235
01:56:30,419 --> 01:56:32,129
using use effect hook

2236
01:56:32,430 --> 01:56:35,049
does that make sense? So technically, if someone asks you that,

2237
01:56:35,160 --> 01:56:38,020
are they equivalent? You would say that you should say directly. No.

2238
01:56:38,029 --> 01:56:40,819
And that would spark a very intriguing conversation with your interviewer as well.

2239
01:56:41,330 --> 01:56:43,779
OK, and then you can explain that because, you know,

2240
01:56:43,790 --> 01:56:45,970
we render the whole app is being run

2241
01:56:46,169 --> 01:56:48,470
like whole app is being rendered again and again.

2242
01:56:48,899 --> 01:56:53,779
Uh, the concept of directly mounting or un mounting, I would say, does not,

2243
01:56:53,959 --> 01:56:56,620
uh, directly translate from classes to functions.

2244
01:56:56,919 --> 01:56:59,740
OK, hence we cannot just say directly that they are,

2245
01:57:00,290 --> 01:57:02,459
um, an equivalent of,

2246
01:57:02,580 --> 01:57:03,310
um,

2247
01:57:03,459 --> 01:57:04,490
life cycle methods.

2248
01:57:04,540 --> 01:57:09,410
But they are something which are hooks and they retain the value, or or, you know, uh,

2249
01:57:09,419 --> 01:57:11,020
help us to perform side effects.

2250
01:57:12,310 --> 01:57:15,299
Uh, on the go. Like when? When? When? Whenever the Whenever they end.

2251
01:57:15,310 --> 01:57:16,850
That is happening or whatever Like that.

2252
01:57:17,069 --> 01:57:18,720
Does that make sense to everyone or not?

2253
01:57:20,169 --> 01:57:23,859
So as effects run for every render use effect, returning function,

2254
01:57:24,009 --> 01:57:24,540
right?

2255
01:57:24,859 --> 01:57:26,370
Um, it's technically not,

2256
01:57:26,629 --> 01:57:28,200
you know, equal to

2257
01:57:28,740 --> 01:57:30,359
the component.

2258
01:57:31,819 --> 01:57:32,839
Will unmount

2259
01:57:33,140 --> 01:57:34,270
Does that make sense?

2260
01:57:36,790 --> 01:57:37,729
Does that make sense?

2261
01:57:38,120 --> 01:57:41,470
So you can think of it something like this You can think of us effect as comped

2262
01:57:41,729 --> 01:57:43,020
mounted or data amount.

2263
01:57:43,229 --> 01:57:44,450
But technically,

2264
01:57:44,759 --> 01:57:46,779
you know now how they work, right?

2265
01:57:46,910 --> 01:57:50,709
So you know how the render works and all that Does that make sense to everyone?

2266
01:57:51,120 --> 01:57:54,540
So you know how the render works. And you also know that

2267
01:57:54,649 --> 01:57:58,759
you know, your clean up logic will be called on every render

2268
01:57:59,600 --> 01:58:02,990
right? If your component is you know, you you're showing the component or whatever,

2269
01:58:03,299 --> 01:58:03,810
right?

2270
01:58:03,959 --> 01:58:04,600
This is

2271
01:58:05,089 --> 01:58:06,470
not a very good example of

2272
01:58:06,649 --> 01:58:09,649
having this. You should technically show the component,

2273
01:58:09,879 --> 01:58:12,740
but yeah, OK. I mean, for for now it works,

2274
01:58:13,149 --> 01:58:13,609
right?

2275
01:58:16,600 --> 01:58:18,209
Uh, I should say

2276
01:58:20,169 --> 01:58:21,049
allow

2277
01:58:21,640 --> 01:58:22,580
of this.

2278
01:58:23,240 --> 01:58:23,680
Whatever.

2279
01:58:25,209 --> 01:58:26,520
And this would be a better way of

2280
01:58:26,830 --> 01:58:27,410
saying

2281
01:58:28,750 --> 01:58:29,609
so once you are,

2282
01:58:29,720 --> 01:58:31,229
you know, allowing updates

2283
01:58:31,750 --> 01:58:33,490
and that point of time.

2284
01:58:33,500 --> 01:58:36,759
Every time you are trying to run the logic, you are running the cleanup logic as well.

2285
01:58:37,209 --> 01:58:37,740
Ok,

2286
01:58:38,020 --> 01:58:39,640
does that make sense, people,

2287
01:58:40,410 --> 01:58:42,620
And when you are, you know, in any case, when you are, you know,

2288
01:58:42,629 --> 01:58:45,750
removing that component right At that point of time also,

2289
01:58:45,950 --> 01:58:46,580
you're

2290
01:58:47,020 --> 01:58:48,540
you are reentering the

2291
01:58:49,770 --> 01:58:50,540
parent.

2292
01:58:50,700 --> 01:58:52,939
Hence you are running this once more.

2293
01:58:53,379 --> 01:58:55,279
Does that make sense or not? Everyone

2294
01:58:55,720 --> 01:58:58,660
is is un mounting kind of concept clear.

2295
01:58:58,669 --> 01:59:00,990
I mean, there's no concept of on mounting and mounting,

2296
01:59:01,209 --> 01:59:04,370
but is the cleanup effects clear or not? A better way of writing?

2297
01:59:04,379 --> 01:59:08,000
This is generally something like this, right? So you might find,

2298
01:59:08,279 --> 01:59:11,339
uh, this kind of syntax Pretty pretty common in

2299
01:59:11,660 --> 01:59:14,009
a lot of cleanup effects. Example,

2300
01:59:14,359 --> 01:59:14,870
OK.

2301
01:59:15,089 --> 01:59:16,250
Or even this

2302
01:59:16,399 --> 01:59:18,140
right? Even this is very common,

2303
01:59:18,609 --> 01:59:19,189
right?

2304
01:59:19,299 --> 01:59:22,330
But you you might not find function like people writing function.

2305
01:59:22,339 --> 01:59:23,459
They will write something like this.

2306
01:59:24,330 --> 01:59:24,859
OK,

2307
01:59:25,549 --> 01:59:26,879
does that make sense to everyone?

2308
01:59:28,830 --> 01:59:29,600
Any confusions?

2309
01:59:29,609 --> 01:59:33,100
Any doubts you can ask me right now because they're about to do an activity.

2310
01:59:33,569 --> 01:59:34,120
Ok,

2311
01:59:37,709 --> 01:59:40,379
OK, we're about to do an activity. Any doubt you can ask me,

2312
01:59:40,919 --> 01:59:42,669
right? I'll give you your starter code.

2313
01:59:43,720 --> 01:59:43,890
Oh,

2314
01:59:44,120 --> 01:59:44,830
God. It's a very big

2315
01:59:48,000 --> 01:59:48,350
pardon.

2316
01:59:55,419 --> 01:59:58,660
So I'll have a starter code on the

2317
02:00:00,089 --> 02:00:00,259
dot.

2318
02:00:04,520 --> 02:00:04,990
OK,

2319
02:00:05,279 --> 02:00:06,850
so this is a whole starter code

2320
02:00:07,290 --> 02:00:10,950
and I hope you can understand what this code does and what the sport means,

2321
02:00:11,520 --> 02:00:12,109
right?

2322
02:00:12,930 --> 02:00:14,680
Because now we're going to convert.

2323
02:00:15,080 --> 02:00:17,029
Oh God. I cannot copy it directly.

2324
02:00:17,290 --> 02:00:19,779
Can like, can you all get the code from here

2325
02:00:20,450 --> 02:00:21,140
directly

2326
02:00:22,279 --> 02:00:23,089
from this file?

2327
02:00:25,819 --> 02:00:26,910
Will you be able to do that?

2328
02:00:33,640 --> 02:00:34,129
OK,

2329
02:00:35,259 --> 02:00:36,180
OK, OK, ok.

2330
02:00:36,629 --> 02:00:39,959
And in your app dot Js You only need to have,

2331
02:00:40,350 --> 02:00:42,029
uh you know, you don't need all this.

2332
02:00:42,899 --> 02:00:44,500
You only need to have

2333
02:00:45,160 --> 02:00:47,000
your dog picks component on me.

2334
02:00:47,450 --> 02:00:48,930
I had it somewhere.

2335
02:00:53,160 --> 02:00:53,770
Mm mm.

2336
02:00:56,270 --> 02:00:56,529
Mhm.

2337
02:01:18,109 --> 02:01:21,720
So in your app dot Js you would need something like this only.

2338
02:01:22,169 --> 02:01:22,589
Right?

2339
02:01:23,930 --> 02:01:27,060
So what we have here is basically

2340
02:01:27,930 --> 02:01:30,810
is is basically, uh,

2341
02:01:35,819 --> 02:01:37,049
a class component.

2342
02:01:37,740 --> 02:01:41,189
The thing we wish you want to do here with this last component is

2343
02:01:41,640 --> 02:01:45,750
kind of convert it to a functional component. I hope people can do that.

2344
02:01:45,759 --> 02:01:46,750
Will you be able to do it?

2345
02:01:49,750 --> 02:01:53,160
Will you be able to convert it to a functional component and also hope you can get the

2346
02:01:53,370 --> 02:01:54,560
values from here?

2347
02:01:56,990 --> 02:01:59,819
So write the hooks equivalent of the given code

2348
02:01:59,830 --> 02:02:03,040
with session for dog picks with hooks dot Js.

2349
02:02:03,049 --> 02:02:05,540
Right. You can create a new file so that you don't

2350
02:02:05,640 --> 02:02:05,919
miss the

2351
02:02:06,100 --> 02:02:06,450
one

2352
02:02:06,609 --> 02:02:07,140
right.

2353
02:02:07,540 --> 02:02:10,859
And this, which displays a random dog image on load.

2354
02:02:11,149 --> 02:02:16,419
And, uh, if you have selected the breed, then it should also, you know,

2355
02:02:16,430 --> 02:02:20,509
use the breed so you can use all the same logic which are written in here.

2356
02:02:20,569 --> 02:02:23,060
But instead, this writer hooks version of it,

2357
02:02:23,540 --> 02:02:24,020
OK,

2358
02:02:24,390 --> 02:02:27,830
or what we can do is wait on this activity.

2359
02:02:27,839 --> 02:02:32,629
OK, let me discuss one thing with with you, and then we can come back to this activity.

2360
02:02:32,640 --> 02:02:33,589
Does that make sense?

2361
02:02:34,390 --> 02:02:35,959
Will that will you all be fine with that?

2362
02:02:37,600 --> 02:02:40,970
So we have to, you know, address one issue which we are

2363
02:02:41,479 --> 02:02:42,540
hanging behind.

2364
02:02:42,759 --> 02:02:46,910
So, one thing, uh, with when we were when we switched from classes to functions,

2365
02:02:46,919 --> 02:02:48,970
was classes are too complex to understand,

2366
02:02:49,319 --> 02:02:49,899
right?

2367
02:02:50,319 --> 02:02:52,589
And the second thing which we the issue,

2368
02:02:52,600 --> 02:02:56,299
which we had hold on that activity for Now we'll do it, Uh, just after two minutes.

2369
02:02:56,370 --> 02:02:58,500
Once we complete this issue, which is there?

2370
02:02:58,750 --> 02:02:59,240
Ok,

2371
02:02:59,600 --> 02:03:03,890
so the logic was spread across different life cycle methods when we were, you know,

2372
02:03:03,899 --> 02:03:04,450
using

2373
02:03:05,109 --> 02:03:05,899
the,

2374
02:03:06,209 --> 02:03:07,310
um

2375
02:03:08,180 --> 02:03:09,629
Then we were using the,

2376
02:03:10,270 --> 02:03:10,790
uh,

2377
02:03:11,470 --> 02:03:12,990
life cycle methods.

2378
02:03:13,339 --> 02:03:17,080
But now, with hooks, it is much more elegant and simpler. Can you see that?

2379
02:03:18,990 --> 02:03:20,339
Yes. Plus one, if you agree

2380
02:03:21,109 --> 02:03:21,919
on all this

2381
02:03:24,919 --> 02:03:25,410
right.

2382
02:03:26,669 --> 02:03:30,529
So now you can grow code by functionality, right? And not

2383
02:03:30,669 --> 02:03:33,850
just by, you know, uh, splitting it across a

2384
02:03:34,040 --> 02:03:36,140
component data, amount of

2385
02:03:36,290 --> 02:03:37,459
amount and all that right.

2386
02:03:37,930 --> 02:03:38,669
So

2387
02:03:38,799 --> 02:03:41,859
So you. You you You're splitting. Saves your time. Right?

2388
02:03:41,870 --> 02:03:43,520
So that is something which helps,

2389
02:03:43,990 --> 02:03:44,600
right?

2390
02:03:45,810 --> 02:03:49,459
Another thing is, uh, you know, this this was one of the major issues.

2391
02:03:49,470 --> 02:03:50,370
The second major issues,

2392
02:03:50,379 --> 02:03:53,080
One was the classes can be confusing and a lot of boilerplate code.

2393
02:03:53,229 --> 02:03:56,100
Second was logic was spread across different life cycle methods.

2394
02:03:56,220 --> 02:03:58,589
OK, so we have already discussed the first issue earlier,

2395
02:03:58,859 --> 02:03:59,390
right?

2396
02:03:59,589 --> 02:04:03,069
And now we when we when we are using new state and all that

2397
02:04:03,390 --> 02:04:05,819
and with the second, uh, use effect,

2398
02:04:05,870 --> 02:04:09,089
we tackled the issue of logic being spread across different life cycle methods.

2399
02:04:09,370 --> 02:04:13,540
Third thing is, we cannot reuse logic without JSX easily

2400
02:04:13,689 --> 02:04:16,879
right will not get into this much in detail. Right.

2401
02:04:16,890 --> 02:04:18,600
But this is something that you will gradually learn

2402
02:04:18,859 --> 02:04:21,060
when you start becoming comfortable with.

2403
02:04:22,180 --> 02:04:22,759
OK,

2404
02:04:23,640 --> 02:04:28,729
so they decide. Like if I if I, you know, run like go with takeaway for hooks is

2405
02:04:29,359 --> 02:04:30,250
by default,

2406
02:04:30,899 --> 02:04:32,350
Use effect, transformation

2407
02:04:32,520 --> 02:04:33,580
and all renders

2408
02:04:34,020 --> 02:04:34,930
we can skip

2409
02:04:35,200 --> 02:04:40,049
effects. Uh, you know, we can skip the calling of that use effect, uh, call back

2410
02:04:40,459 --> 02:04:42,890
if we pass in a second argument, which is an

2411
02:04:43,049 --> 02:04:44,850
a where we can specify

2412
02:04:44,990 --> 02:04:46,270
what changes to listen to

2413
02:04:46,390 --> 02:04:47,000
right

2414
02:04:47,370 --> 02:04:48,069
and

2415
02:04:48,209 --> 02:04:52,660
the return function of use effect can be used for cleanup actions for that effect.

2416
02:04:52,990 --> 02:04:54,089
Does that make sense

2417
02:04:54,910 --> 02:04:55,390
an art?

2418
02:04:56,060 --> 02:04:58,120
So for that effect, if you are having something

2419
02:04:58,379 --> 02:05:02,859
you can clean up that, um, effects, uh, you know, AAA any any,

2420
02:05:02,870 --> 02:05:06,799
any clean the actions you can do inside for that effect inside that effect only.

2421
02:05:06,870 --> 02:05:08,779
And you don't need to split the logic again

2422
02:05:09,049 --> 02:05:10,069
into something else,

2423
02:05:10,240 --> 02:05:10,770
OK,

2424
02:05:11,350 --> 02:05:14,839
and now we'll come back to that activity. I hope if if this makes sense to everyone,

2425
02:05:15,080 --> 02:05:18,299
then I believe once you are, uh, completed,

2426
02:05:18,310 --> 02:05:20,870
once you complete that activity from converting that class

2427
02:05:21,109 --> 02:05:23,410
component to a functional component,

2428
02:05:24,000 --> 02:05:27,529
then you will probably be very comfortable with understanding

2429
02:05:27,540 --> 02:05:29,529
hooks and how they work and all that stuff.

2430
02:05:30,520 --> 02:05:35,370
Is it clear to you or not this takeaways or not? This is this takeaways which you had

2431
02:05:35,520 --> 02:05:36,839
for side effects with folks.

2432
02:05:37,330 --> 02:05:41,109
I want to answer for everyone who is there and if there's any doubt,

2433
02:05:41,120 --> 02:05:43,830
you can definitely go ahead and ask, and then we'll start doing the activity.

2434
02:05:45,779 --> 02:05:46,390
OK,

2435
02:05:47,029 --> 02:05:47,439
we have.

2436
02:05:49,450 --> 02:05:50,129
So you're my

2437
02:05:51,100 --> 02:05:51,319
deep

2438
02:05:51,709 --> 02:05:53,109
sun. Everyone clear. Prachi

2439
02:05:53,259 --> 02:05:53,870
clear

2440
02:05:54,770 --> 02:05:54,810
Sua

2441
02:05:55,370 --> 02:05:55,500
Neha

2442
02:05:55,709 --> 02:05:55,950
pul

2443
02:05:56,180 --> 02:05:57,109
Taron Kal

2444
02:05:58,689 --> 02:05:58,810
Rashan

2445
02:05:59,370 --> 02:05:59,740
Raviraj.

2446
02:05:59,890 --> 02:05:59,970
Ah,

2447
02:06:00,430 --> 02:06:01,310
Yash Kuna

2448
02:06:02,209 --> 02:06:02,450
Mohe.

2449
02:06:06,560 --> 02:06:07,459
Ok,

2450
02:06:08,459 --> 02:06:10,069
everyone is clear on this, right?

2451
02:06:10,959 --> 02:06:12,509
I hope. Cool.

2452
02:06:13,709 --> 02:06:16,169
So let's start with this. Let's do this activity then.

2453
02:06:16,299 --> 02:06:16,830
OK?

2454
02:06:17,100 --> 02:06:18,000
So I hope

2455
02:06:18,279 --> 02:06:22,359
you can see this code. So this code has a class dog picks, right?

2456
02:06:22,370 --> 02:06:23,790
Create basically a new,

2457
02:06:24,000 --> 02:06:25,560
uh, dog picks.

2458
02:06:26,419 --> 02:06:27,790
Uh, dog pick

2459
02:06:27,970 --> 02:06:29,500
books dot Js

2460
02:06:29,729 --> 02:06:33,100
and then try to write a code in here. OK, don't try to mess up with the original code.

2461
02:06:33,109 --> 02:06:33,569
It will

2462
02:06:33,959 --> 02:06:35,990
cause more problems than good.

2463
02:06:36,279 --> 02:06:36,839
OK,

2464
02:06:38,209 --> 02:06:39,319
so we have a constructor

2465
02:06:39,479 --> 02:06:41,939
where we have this do default breed set as something

2466
02:06:42,720 --> 02:06:43,240
OK,

2467
02:06:43,450 --> 02:06:45,569
we have this dot state set as something

2468
02:06:46,029 --> 02:06:46,580
OK,

2469
02:06:46,729 --> 02:06:51,720
which is breed and you know this dot default breed whatever and we have an image link

2470
02:06:52,029 --> 02:06:52,770
as well.

2471
02:06:53,700 --> 02:06:55,910
We have a competed amount now I believe you

2472
02:06:55,919 --> 02:06:58,069
know where where the logic inside this will go.

2473
02:06:59,009 --> 02:07:02,689
We have a comprehended update where I believe again. You know what? What?

2474
02:07:02,700 --> 02:07:04,990
What are we checking for which will go

2475
02:07:05,220 --> 02:07:05,990
inside

2476
02:07:06,109 --> 02:07:07,779
What part of that hook

2477
02:07:08,000 --> 02:07:10,229
which you which you will use, right?

2478
02:07:10,750 --> 02:07:15,209
And then we have this render dog image function right, which you can use directly

2479
02:07:15,379 --> 02:07:17,700
with some minor changes like you know where

2480
02:07:17,709 --> 02:07:19,350
where you're setting the state and all that.

2481
02:07:19,810 --> 02:07:20,819
And then we have a handle.

2482
02:07:20,830 --> 02:07:24,919
Breed change where again, you have to set the state in the newer fashion.

2483
02:07:25,290 --> 02:07:26,359
And here,

2484
02:07:26,370 --> 02:07:28,779
inside this you will only change the places where

2485
02:07:28,790 --> 02:07:30,700
you are using this keyword and all that.

2486
02:07:31,149 --> 02:07:31,740
OK,

2487
02:07:31,930 --> 02:07:33,640
does that make sense to everyone or not

2488
02:07:34,020 --> 02:07:35,990
so quickly? Um, you know,

2489
02:07:36,410 --> 02:07:37,569
try to write a

2490
02:07:38,129 --> 02:07:40,689
hooks, Fun hooks version of this function,

2491
02:07:40,870 --> 02:07:42,509
uh, hooks version of this class,

2492
02:07:42,770 --> 02:07:43,750
and I'll wait for you.

2493
02:07:43,919 --> 02:07:46,040
Right? Uh, for the next 45 minutes,

2494
02:07:46,370 --> 02:07:49,390
and then we will, you know, see the solution of it quickly,

2495
02:07:49,899 --> 02:07:51,299
and then we'll close up this session.

2496
02:07:51,709 --> 02:07:52,270
OK,

2497
02:07:52,569 --> 02:07:54,879
So this is the last activity for today

2498
02:07:55,359 --> 02:07:56,500
as well as

2499
02:07:57,899 --> 02:07:59,169
Yeah, for for us.

2500
02:08:01,459 --> 02:08:01,979
OK,

2501
02:08:03,540 --> 02:08:04,870
everyone understood the assignment.

2502
02:08:05,560 --> 02:08:06,410
What do you have to do

2503
02:08:12,549 --> 02:08:13,200
but it

2504
02:08:13,930 --> 02:08:14,569
proceed.

2505
02:08:14,819 --> 02:08:16,910
OK, I'll, I'll wait for any doubts if you have.

2506
02:08:17,250 --> 02:08:17,819
Right.

2507
02:08:18,330 --> 02:08:20,939
And, uh, I'll also, you know, be present

2508
02:08:21,299 --> 02:08:22,459
with you throughout for this,

2509
02:08:22,919 --> 02:08:23,430
right?

2510
02:08:23,939 --> 02:08:25,979
And once you're done, we'll discuss the solution.

2511
02:09:33,709 --> 02:09:34,240
Mhm.

2512
02:10:49,669 --> 02:10:51,560
Once you're done, basically paste the

2513
02:10:51,850 --> 02:10:53,520
four sandbox link so that I can see

2514
02:10:55,370 --> 02:10:55,770
Yeah.

2515
02:11:38,759 --> 02:11:42,169
Are you all able to do it? Or is there any blocker which you're facing?

2516
02:11:55,279 --> 02:11:55,310
You

2517
02:11:56,200 --> 02:11:56,649
the

2518
02:11:57,500 --> 02:11:59,930
You are able to understand what you want to do here.

2519
02:12:04,029 --> 02:12:06,640
Be aware of the keyboard This and, uh,

2520
02:12:07,129 --> 02:12:07,700
you know,

2521
02:12:08,189 --> 02:12:11,470
that is the only thing that you need to be careful of. The rest of the things just go

2522
02:12:12,560 --> 02:12:14,009
inside the hoax

2523
02:12:14,310 --> 02:12:15,009
that it can be

2524
02:12:18,049 --> 02:12:19,540
maintaining it. Using the hooks.

2525
02:13:11,029 --> 02:13:12,569
You start doing it bit by bit,

2526
02:13:13,299 --> 02:13:13,620
people.

2527
02:13:18,549 --> 02:13:19,910
You open it on the side,

2528
02:13:22,089 --> 02:13:23,100
you start doing it when

2529
02:13:23,240 --> 02:13:23,259
I

2530
02:13:26,859 --> 02:13:27,350
Ok,

2531
02:13:27,540 --> 02:13:29,189
quickly, quickly. Eyes on the screen

2532
02:13:29,430 --> 02:13:30,680
if you're able to do it.

2533
02:13:30,959 --> 02:13:31,549
Um,

2534
02:13:32,299 --> 02:13:34,799
well, enough if you are if you're if you're not able to do it,

2535
02:13:34,810 --> 02:13:36,000
If you're still still trying,

2536
02:13:36,140 --> 02:13:38,740
have a look on the screen and then you can try it again.

2537
02:13:39,060 --> 02:13:39,580
You know,

2538
02:13:39,740 --> 02:13:41,149
um, once you

2539
02:13:43,709 --> 02:13:44,330
visited the slide.

2540
02:13:44,879 --> 02:13:45,450
OK,

2541
02:13:46,259 --> 02:13:48,189
Do I have people on on the screen with me?

2542
02:13:50,250 --> 02:13:50,930
Yes or no.

2543
02:13:52,359 --> 02:13:53,490
Quickly, quickly.

2544
02:13:54,950 --> 02:13:57,149
So first thing which I want to do here

2545
02:13:57,390 --> 02:13:58,759
is

2546
02:13:58,899 --> 02:13:59,919
just a second.

2547
02:14:01,950 --> 02:14:02,629
The sides

2548
02:14:03,850 --> 02:14:04,720
they can see what

2549
02:14:04,870 --> 02:14:06,140
what they exactly wanted

2550
02:14:06,799 --> 02:14:07,770
need to do.

2551
02:14:13,160 --> 02:14:14,089
Um

2552
02:14:20,109 --> 02:14:20,569
OK,

2553
02:14:21,149 --> 02:14:22,589
so I have to bring in

2554
02:14:23,060 --> 02:14:24,220
the breed and all that. Ok,

2555
02:14:24,459 --> 02:14:29,049
cool. So what I can do is I can write a function which I can say dot

2556
02:14:30,620 --> 02:14:35,339
uh, with books or whatever right? I can say Say something like that I believe. Yes.

2557
02:14:36,000 --> 02:14:37,390
I hope people agree on this.

2558
02:14:39,290 --> 02:14:39,799
OK,

2559
02:14:40,649 --> 02:14:44,520
And here what I can do is I can start with whatever is inside the constructor.

2560
02:14:44,700 --> 02:14:46,910
I can use it as a set state.

2561
02:14:47,040 --> 02:14:50,160
So whatever the breed, I can have set a breed

2562
02:14:50,810 --> 02:14:51,310
right?

2563
02:14:51,479 --> 02:14:54,140
And I can start with the use state

2564
02:14:54,450 --> 02:14:55,740
and the breed is random.

2565
02:14:56,410 --> 02:14:56,950
OK,

2566
02:14:57,060 --> 02:14:59,200
so my default value just went to

2567
02:14:59,310 --> 02:15:00,339
random here.

2568
02:15:00,600 --> 02:15:01,129
Ok,

2569
02:15:01,759 --> 02:15:04,750
The other thing, which I can keep in here, is the image link.

2570
02:15:05,109 --> 02:15:05,669
Right?

2571
02:15:06,290 --> 02:15:07,859
Or set image link.

2572
02:15:09,080 --> 02:15:10,669
Something like that new state,

2573
02:15:11,140 --> 02:15:11,830
which is plan.

2574
02:15:12,319 --> 02:15:13,879
Does that make sense to everyone or not?

2575
02:15:14,129 --> 02:15:16,450
So you have basically converted this constructor

2576
02:15:16,720 --> 02:15:17,950
into these two

2577
02:15:18,359 --> 02:15:21,490
books to maintain this state plus one. If you understand this patch,

2578
02:15:23,459 --> 02:15:24,060
yes,

2579
02:15:25,370 --> 02:15:28,439
The next thing is, whatever the render logic is inside it,

2580
02:15:28,450 --> 02:15:30,419
I would want to have it inside my

2581
02:15:30,669 --> 02:15:31,459
return.

2582
02:15:33,270 --> 02:15:33,779
Ok,

2583
02:15:34,529 --> 02:15:37,040
so whatever the render logic is here with me,

2584
02:15:37,379 --> 02:15:39,470
I would want it in my return directly.

2585
02:15:39,709 --> 02:15:41,259
OK, The next next thing which I do

2586
02:15:42,240 --> 02:15:46,589
where I have this dot state I will just go ahead and remove it. I don't need it at all

2587
02:15:46,839 --> 02:15:47,299
right.

2588
02:15:47,770 --> 02:15:51,060
And whenever I Whenever I have a this basically I'll just go ahead and remove that.

2589
02:15:51,450 --> 02:15:52,009
OK,

2590
02:15:52,779 --> 02:15:53,790
so

2591
02:15:53,899 --> 02:15:57,450
and the value I can also let me OK, bring in

2592
02:15:57,839 --> 02:16:00,009
default breed which is random,

2593
02:16:00,600 --> 02:16:03,890
right? And let me set the state as default breed

2594
02:16:04,549 --> 02:16:05,089
Ok,

2595
02:16:05,529 --> 02:16:07,359
so my other things are not breaking

2596
02:16:08,180 --> 02:16:08,689
ok,

2597
02:16:08,790 --> 02:16:12,479
this dot state is gone This dot dot This is gone

2598
02:16:12,629 --> 02:16:13,149
ok

2599
02:16:13,629 --> 02:16:15,790
anywhere else if I'm using this,

2600
02:16:16,120 --> 02:16:17,189
OK, this dot

2601
02:16:17,540 --> 02:16:20,660
render dog image is also gone

2602
02:16:20,779 --> 02:16:22,600
and I'm not using this anymore,

2603
02:16:22,810 --> 02:16:23,370
ok,

2604
02:16:23,700 --> 02:16:25,250
Does this make sense to everyone or not

2605
02:16:25,970 --> 02:16:27,359
what we are just trying to do here?

2606
02:16:27,759 --> 02:16:31,620
OK, so my render logic is done plus two in the chart if you understand

2607
02:16:32,250 --> 02:16:32,730
OK,

2608
02:16:33,129 --> 02:16:36,638
the next thing is to bring in these two functions into the scene.

2609
02:16:37,080 --> 02:16:39,388
OK, so when I bring in these two functions in the scene,

2610
02:16:39,669 --> 02:16:43,138
I first need to add constant in front of it both.

2611
02:16:43,849 --> 02:16:46,200
Second thing is, instead of this dot set set,

2612
02:16:46,339 --> 02:16:47,290
I'll have to set

2613
02:16:47,718 --> 02:16:48,790
set breed

2614
02:16:49,330 --> 02:16:50,580
to new breed,

2615
02:16:51,839 --> 02:16:52,330
OK,

2616
02:16:52,700 --> 02:16:54,629
And this logic Oops,

2617
02:16:55,089 --> 02:16:56,888
this logic just goes away

2618
02:16:58,120 --> 02:16:59,030
here also

2619
02:16:59,330 --> 02:17:03,790
I'll have to use a set image link to image link

2620
02:17:05,519 --> 02:17:06,058
right

2621
02:17:06,740 --> 02:17:08,808
which is created and this logic goes away.

2622
02:17:09,990 --> 02:17:10,558
OK,

2623
02:17:11,227 --> 02:17:12,398
does that make sense

2624
02:17:12,848 --> 02:17:14,529
now? Here also, I was using this DEA

2625
02:17:14,727 --> 02:17:15,239
breed.

2626
02:17:15,859 --> 02:17:18,148
I don't need to use it anymore because I can directly,

2627
02:17:18,638 --> 02:17:20,388
you know, consult this particular part.

2628
02:17:21,450 --> 02:17:21,980
Yes,

2629
02:17:22,977 --> 02:17:23,628
Yes, I know.

2630
02:17:25,249 --> 02:17:27,518
Plus three in the chart, if you understand what happened to you.

2631
02:17:29,529 --> 02:17:30,098
Yes,

2632
02:17:30,888 --> 02:17:31,379
I know

2633
02:17:33,660 --> 02:17:33,679
who.

2634
02:17:34,990 --> 02:17:35,138
Good.

2635
02:17:35,820 --> 02:17:36,299
Good.

2636
02:17:38,370 --> 02:17:38,888
Ok,

2637
02:17:39,558 --> 02:17:40,009
OK,

2638
02:17:40,879 --> 02:17:44,679
Anything else which is remaining in this function, which which I need to convert.

2639
02:17:44,690 --> 02:17:47,940
OK, so these hooks which are there I need to convert

2640
02:17:48,370 --> 02:17:53,509
so to convert them what I need to have is instead I'll have to have a use effect

2641
02:17:53,820 --> 02:17:55,269
inside my use effect.

2642
02:17:55,468 --> 02:17:59,790
What I will do is I will do a render dog image. OK? Please do this

2643
02:18:00,110 --> 02:18:02,530
and use the breed which is there

2644
02:18:02,940 --> 02:18:03,500
ok,

2645
02:18:03,769 --> 02:18:07,030
and do this only when the breed changes.

2646
02:18:08,529 --> 02:18:09,088
OK,

2647
02:18:09,489 --> 02:18:12,739
do this only when the breed changes.

2648
02:18:12,989 --> 02:18:17,208
Right? So if the breed is not equal to the new breed, then only perform this function

2649
02:18:17,727 --> 02:18:18,268
right?

2650
02:18:18,789 --> 02:18:20,098
And

2651
02:18:21,330 --> 02:18:22,660
generally this is

2652
02:18:23,648 --> 02:18:25,648
called the really after,

2653
02:18:25,949 --> 02:18:26,418
right?

2654
02:18:27,138 --> 02:18:28,838
This is general generally the trend, right?

2655
02:18:28,848 --> 02:18:31,529
So you you call all the use effects near to

2656
02:18:31,539 --> 02:18:33,539
your return wherever you are trying to return it.

2657
02:18:33,548 --> 02:18:34,859
OK, so this is generally the rule.

2658
02:18:35,509 --> 02:18:37,580
Uh, originally the convention, which is followed.

2659
02:18:37,900 --> 02:18:41,638
OK, finally I'll do an export default.

2660
02:18:41,980 --> 02:18:43,650
Uh, dog picks

2661
02:18:43,950 --> 02:18:44,780
with hooks.

2662
02:18:45,209 --> 02:18:45,718
Right?

2663
02:18:46,459 --> 02:18:48,490
Uh, I think I've converted almost everything.

2664
02:18:48,500 --> 02:18:51,049
Which is, which was asked asked of me here

2665
02:18:51,450 --> 02:18:54,780
into hooks, and I will call this inside. My

2666
02:18:56,058 --> 02:18:58,110
dog picks with books,

2667
02:18:58,780 --> 02:18:59,308
right?

2668
02:19:00,360 --> 02:19:02,280
And I'll hide this one.

2669
02:19:03,040 --> 02:19:04,370
I don't need it anymore.

2670
02:19:04,799 --> 02:19:05,929
Let me bring my

2671
02:19:07,679 --> 02:19:08,650
function in here

2672
02:19:08,959 --> 02:19:10,610
when the review in here.

2673
02:19:11,000 --> 02:19:12,570
And see if this works or not.

2674
02:19:13,818 --> 02:19:15,628
OK, so if I change the breed,

2675
02:19:16,509 --> 02:19:17,259
I can get the

2676
02:19:18,919 --> 02:19:20,269
beagles right.

2677
02:19:20,450 --> 02:19:23,849
And if I change it to Husky, I should get husky images.

2678
02:19:24,609 --> 02:19:25,939
Does that make sense to everyone?

2679
02:19:26,589 --> 02:19:28,240
Right. If I change it to random,

2680
02:19:28,400 --> 02:19:30,200
I should get a random image.

2681
02:19:30,879 --> 02:19:31,419
OK,

2682
02:19:32,049 --> 02:19:35,450
plus five, if you understand. Basically plus four was for,

2683
02:19:35,700 --> 02:19:37,740
uh, plus four, if you understand the hooks,

2684
02:19:38,000 --> 02:19:39,209
this this use effect

2685
02:19:39,519 --> 02:19:42,169
and plus five, if you understand everything

2686
02:19:42,990 --> 02:19:44,440
from from starts to the bottom,

2687
02:19:45,080 --> 02:19:48,099
Right. So this is our hooks way of doing things,

2688
02:19:48,320 --> 02:19:51,209
right? This is our hooks way of converting what we?

2689
02:19:51,219 --> 02:19:52,990
We We were doing with this particular part,

2690
02:19:53,879 --> 02:19:54,370
ok?

2691
02:19:55,150 --> 02:19:56,379
Does that make sense to everyone?

2692
02:19:57,040 --> 02:19:57,509
Who?

2693
02:20:00,009 --> 02:20:00,580
Ok,

2694
02:20:03,440 --> 02:20:05,690
brilliant. Brilliant, Brilliant. Brilliant.

2695
02:20:08,570 --> 02:20:09,120
Ok,

2696
02:20:11,440 --> 02:20:12,309
cool people.

2697
02:20:12,450 --> 02:20:13,089
I mean,

2698
02:20:13,910 --> 02:20:14,780
that was

2699
02:20:15,219 --> 02:20:15,980
all

2700
02:20:16,339 --> 02:20:18,179
for today's session,

2701
02:20:18,540 --> 02:20:19,040
right?

2702
02:20:19,509 --> 02:20:22,709
And thanks a lot for joining in. I believe you learned something new

2703
02:20:23,259 --> 02:20:25,009
and the session was insightful for you,

2704
02:20:25,299 --> 02:20:28,000
right? We are 24 people in here. I would at least qu

2705
02:20:28,120 --> 02:20:29,969
2023

2706
02:20:30,129 --> 02:20:33,719
responses in the feedback form which I have posted the link to in the chart.

2707
02:20:34,250 --> 02:20:34,799
OK,

2708
02:20:36,530 --> 02:20:37,929
once you,

2709
02:20:38,950 --> 02:20:41,589
uh, done just fill in the feedback form and then you can drop off.

2710
02:20:41,599 --> 02:20:42,610
We'll meet on Saturday.

2711
02:20:42,879 --> 02:20:43,429
All right.

2712
02:20:44,049 --> 02:20:49,030
Uh, I'm actually running late for something, so I'll probably drop off also.

2713
02:20:49,669 --> 02:20:50,160
Right?

2714
02:20:51,019 --> 02:20:51,530
Uh,

2715
02:20:51,700 --> 02:20:54,429
any doubts we can take up on the next session, if that's possible,

2716
02:20:57,419 --> 02:20:57,950
OK?

2717
02:20:58,679 --> 02:21:00,169
Or or you can just place it in the lap

2718
02:21:00,740 --> 02:21:01,509
or so the

2719
02:21:01,690 --> 02:21:03,250
can help you out. If there's anything,

2720
02:21:04,709 --> 02:21:05,919
does that make sense to everyone?

2721
02:21:06,919 --> 02:21:07,809
Is it cool?

2722
02:21:09,799 --> 02:21:11,379
Do people hear me?

2723
02:21:11,769 --> 02:21:12,309
Ok,

2724
02:21:12,419 --> 02:21:14,650
thanks a lot for joining in for today's session.

2725
02:21:14,919 --> 02:21:16,030
Bye bye. And good night.

2726
02:21:16,040 --> 02:21:20,370
We'll meet on, uh, the next session which will be on I believe Saturday.

2727
02:21:20,799 --> 02:21:22,879
All right, So we'll meet on Saturdays. Session.

2728
02:21:23,030 --> 02:21:25,089
I hope you learned something new and valuable today.

2729
02:21:26,070 --> 02:21:29,200
Please get to share Share your feedback with us,

2730
02:21:29,910 --> 02:21:32,519
OK? So that we can understand what you like.

2731
02:21:32,530 --> 02:21:35,299
What you did not like what we can improve what we cannot

2732
02:21:35,629 --> 02:21:36,440
right and all that.

2733
02:21:38,879 --> 02:21:39,530
Ok, then

2734
02:21:40,379 --> 02:21:41,870
I'll stop sharing my screen.

2735
02:21:42,919 --> 02:21:44,570
And I would request you all to just

2736
02:21:45,219 --> 02:21:47,709
fill in the feedback form before you leave.

2737
02:21:50,809 --> 02:21:51,179
Yeah,

2738
02:21:53,240 --> 02:21:54,009
Uh,

2739
02:21:54,349 --> 02:21:58,139
I just mentioned this to the team. I also I already mentioned this to the team,

2740
02:21:58,599 --> 02:21:59,099
but

2741
02:21:59,410 --> 02:22:01,469
please do mention this to

2742
02:22:01,580 --> 02:22:04,950
them as well, Like on yourself. So I have also already done.

2743
02:22:05,919 --> 02:22:06,839
I only did it

2744
02:22:07,179 --> 02:22:07,790
right,

2745
02:22:07,910 --> 02:22:10,889
but I mean, that would be the best that you can do, I believe. Then

2746
02:22:13,549 --> 02:22:15,410
you can can think them again if you want.

2747
02:22:15,549 --> 02:22:16,549
I think that would be

2748
02:22:16,900 --> 02:22:17,700
no harm.

2749
02:22:18,089 --> 02:22:18,589
OK,

2750
02:22:18,730 --> 02:22:20,519
I already dropped in a message that day and

2751
02:22:20,530 --> 02:22:22,320
they said that they will look into something but

2752
02:22:22,820 --> 02:22:25,080
I do not see that part. So I cannot

2753
02:22:25,360 --> 02:22:25,889
you know

2754
02:22:26,320 --> 02:22:28,490
that's not into my jurisdiction. Actually,

2755
02:22:31,049 --> 02:22:32,129
you fill in the feedback form

2756
02:22:33,679 --> 02:22:34,530
so that we can

2757
02:22:35,709 --> 02:22:35,730
to

2758
02:22:35,929 --> 02:22:37,190
decision quality

2759
02:22:37,559 --> 02:22:38,320
for you all.

2760
02:22:39,209 --> 02:22:39,660
Ok,